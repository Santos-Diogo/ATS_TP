/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 00:41:11 GMT 2024
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Artigo;
import Model.TShirt;
import java.time.Clock;
import java.time.LocalDate;
import java.time.chrono.HijrahDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class TShirt_ESTest extends TShirt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.M;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.PALMEIRAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.IMPECÁVEL;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "", artigo_Estado0, (-1), artigo_Avaliação0, "", "", "$VALUES", (-1), (-1), "4(Q6-'=");
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      String string0 = tShirt0.toString(localDate0);
      assertEquals("ID: 1\nTipo: \nEstado: USADO\nN\u00FAmero de Donos: -1\nAvalia\u00E7\u00E3o: IMPEC\u00C1VEL\nDescri\u00E7\u00E3o: \nMarca: \nC\u00F3digo: $VALUES\nPre\u00E7o Base: -1.0\nCorre\u00E7\u00E3o do Pre\u00E7o: -1.0\nTransportadora: 4(Q6-'=\nTamanho: M\nPadrao: PALMEIRAS\nPre\u00E7o Final: -1.0\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.S;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.IMPECÁVEL;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "|M@?H`n4#I X,L/DS", artigo_Estado0, 379, artigo_Avaliação0, "[As,J]2f%JqNoZ|,Nv#", "[As,J]2f%JqNoZ|,Nv#", "tSM[bRn4EDv/+1s", (-1.0), (-2311.05862352991), "6:S/@]CBJ&");
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      LocalDate localDate0 = MockLocalDate.from(hijrahDate0);
      double double0 = tShirt0.precoFinal(localDate0);
      assertEquals((-0.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.XL;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "R;S'8vY(([Cd", artigo_Estado0, 1460, artigo_Avaliação0, "\b9", "\b9", "\b9", 1460, 0.0, "XF^y2Neg-");
      TShirt.Tamanho tShirt_Tamanho1 = tShirt0.getTamanho();
      assertSame(tShirt_Tamanho1, tShirt_Tamanho0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      tShirt0.setPadrao(tShirt_Padrao0);
      TShirt.Padrao tShirt_Padrao1 = tShirt0.getPadrao();
      assertEquals(TShirt.Padrao.RISCAS, tShirt_Padrao1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.XL;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.PALMEIRAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.BOM;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "-,", artigo_Estado0, 656, artigo_Avaliação0, "-,", "-,", "-,", 656, 0.0, "TVg)&::i");
      TShirt tShirt1 = tShirt0.clone();
      assertTrue(tShirt1.equals((Object)tShirt0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      tShirt0.setId(0);
      TShirt tShirt1 = tShirt0.clone();
      assertEquals("", tShirt1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      tShirt0.setId((-927));
      TShirt tShirt1 = tShirt0.clone();
      assertEquals("", tShirt1.getDescricao());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.S;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.LISO;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.BOM;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "Model.Artigo$Estado", artigo_Estado0, (-814), artigo_Avaliação0, "G+k=XH|ISiC ", "Model.Artigo$Estado", "Model.Artigo$Estado", 1899.651, 1899.651, "Y");
      TShirt tShirt1 = tShirt0.clone();
      assertTrue(tShirt1.equals((Object)tShirt0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.XL;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.LISO;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.IMPECÁVEL;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "Zw-e^@-koRS2+7W'Oj[", artigo_Estado0, (-1), artigo_Avaliação0, "Zw-e^@-koRS2+7W'Oj[", "Transportadora: ", "\"!EY:", (-1), (-1), "\"!EY:");
      TShirt tShirt1 = tShirt0.clone();
      assertTrue(tShirt1.equals((Object)tShirt0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TShirt tShirt0 = null;
      try {
        tShirt0 = new TShirt((TShirt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.PALMEIRAS;
      tShirt0.setPadrao(tShirt_Padrao0);
      double double0 = tShirt0.precoFinal((LocalDate) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      double double0 = tShirt0.precoFinal(localDate0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.S;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "G>\"(rV aHc4U]=", artigo_Estado0, 511, artigo_Avaliação0, "G>\"(rV aHc4U]=", "IMPEC\u00C1VEL", "G>\"(rV aHc4U]=", 511, 996.24446170333, "IMPEC\u00C1VEL");
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      double double0 = tShirt0.precoFinal(localDate0);
      assertEquals(255.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      tShirt0.getPadrao();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      tShirt0.getTamanho();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      TShirt tShirt1 = new TShirt(tShirt0);
      assertNull(tShirt1.getPadrao());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.L;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.IMPECÁVEL;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "", artigo_Estado0, 0, artigo_Avaliação0, "", "", "", 0, 0, "");
      TShirt tShirt1 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "", artigo_Estado0, 0, artigo_Avaliação0, "", "", "", 0, 0, "");
      boolean boolean0 = tShirt0.equals(tShirt1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.XL;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      TShirt tShirt1 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "", artigo_Estado0, 1, artigo_Avaliação0, "", "", "", 1, 1, "");
      boolean boolean0 = tShirt0.equals(tShirt1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.S;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.PALMEIRAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.IMPECÁVEL;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "LISO", artigo_Estado0, 1, artigo_Avaliação0, "LISO", "LISO", "LISO", 1, 1, "LISO");
      boolean boolean0 = tShirt0.equals("LISO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      boolean boolean0 = tShirt0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.L;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.IMPECÁVEL;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "", artigo_Estado0, 0, artigo_Avaliação0, "", "", "", 0, 0, "");
      boolean boolean0 = tShirt0.equals(tShirt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.L;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.IMPECÁVEL;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "", artigo_Estado0, 0, artigo_Avaliação0, "", "", "", 0, 0, "");
      tShirt0.setTamanho(tShirt_Tamanho0);
      assertNull(tShirt0.getAvaliacao());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TShirt tShirt0 = new TShirt();
      TShirt tShirt1 = tShirt0.clone();
      assertTrue(tShirt1.equals((Object)tShirt0));
      
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.RISCAS;
      tShirt1.setPadrao(tShirt_Padrao0);
      boolean boolean0 = tShirt0.equals(tShirt1);
      assertFalse(tShirt1.equals((Object)tShirt0));
      assertFalse(boolean0);
  }
}
