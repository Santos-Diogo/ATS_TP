/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 00:41:10 GMT 2024
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Artigo;
import Model.Encomenda;
import Model.Malas;
import Model.Transportadoras;
import Model.Utilizador;
import Model.Vintage;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Vintage_ESTest extends Vintage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      Transportadoras transportadoras0 = new Transportadoras("C'U%A4+7XLja] y/X;", 105.47099, (-233.0627), true, (-155.4547701));
      hashMap0.put((String) null, transportadoras0);
      vintage0.setTransportadoras(hashMap0);
      String string0 = vintage0.calculaMaiorVolFaturacao();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.now();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate1 = MockLocalDate.now(clock0);
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoIntervalo(localDate0, localDate1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        vintage0.aterarTransportadora("----------------------------------------\n               VINTAGE                  \n----------------------------------------\nSess\u00E3o Atual: null\nUtilizadores: {}\nEncomendas: []\nTransportadoras: {}\nData do Programa: 2014-02-14\n", double0, (Double) null, (-816));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      vintage0.adiarPrazoLimite(0, 0);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      linkedList0.add(encomenda0);
      vintage0.setEncomendas(linkedList0);
      vintage0.devolverEncomenda(8);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("R3d<N?nQ)0", "", "Data do Programa: ", (String) null, 0, list0, list0, list0, map0);
      hashMap0.put("", utilizador1);
      List<Encomenda> list1 = vintage0.encomendasParaDevolver();
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      Vintage vintage1 = new Vintage("", hashMap0, list1, map1, (LocalDate) null);
      assertEquals("", vintage1.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      List<Artigo> list0 = vintage0.getArtigosVenda();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "~", "O`'", (String) null, (-127), list0, list0, list0, hashMap0);
      vintage0.adicionaUtilizador(utilizador0);
      Map<String, Double> map0 = vintage0.top10Vendedores(localDate0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "~", "O`'", (String) null, (-127), list0, list0, list0, hashMap0);
      vintage0.adicionaUtilizador(utilizador0);
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras();
      vintage0.adicionarTransportadora(transportadoras0);
      Transportadoras transportadoras1 = vintage0.getTransportadora("");
      assertNotSame(transportadoras1, transportadoras0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      Map<String, Transportadoras> map1 = vintage0.getTransportadorasPremium();
      LocalDate localDate0 = MockLocalDate.now();
      Vintage vintage1 = new Vintage("               VINTAGE                  \n", map0, list0, map1, localDate0);
      String string0 = vintage1.getSessaoAtual();
      assertEquals("               VINTAGE                  \n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Map<String, Transportadoras> map1 = vintage0.getTransportadoras();
      LocalDate localDate0 = MockLocalDate.now();
      Vintage vintage1 = new Vintage("", map0, linkedList0, map1, localDate0);
      Vintage vintage2 = new Vintage(vintage1);
      vintage2.getSessaoAtual();
      assertTrue(vintage1.equals((Object)vintage2));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Transportadoras transportadoras0 = new Transportadoras("@mT_kW5?@", 1473.0, (-1.0), true, 251.22916);
      vintage0.adicionarTransportadora(transportadoras0);
      double double0 = vintage0.getMaiorVolFaturacao("@mT_kW5?@");
      assertEquals(251.22916, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      double double0 = vintage0.getMaiorFaturacaoSempre("");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Encomenda> list0 = vintage0.getEncomendas();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Map<String, Transportadoras> map1 = vintage0.getTransportadoras();
      Vintage vintage1 = new Vintage("Pre\u00E7o Final: ", map0, linkedList0, map1, (LocalDate) null);
      LocalDate localDate0 = vintage1.getDataPrograma();
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      Encomenda encomenda0 = new Encomenda();
      Map<Integer, String> map0 = encomenda0.getVendedores();
      // Undeclared exception!
      try { 
        vintage0.trataEncomenda((List<Integer>) null, list0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.setTransportadoras((Map<String, Transportadoras>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.setEncomendas((List<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      // Undeclared exception!
      try { 
        vintage0.listarVendas("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      vintage0.addEncomenda(encomenda1);
      // Undeclared exception!
      try { 
        vintage0.getEncomendasSessaoAtual();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPrazoLimite((LocalDate) null);
      linkedList0.add(encomenda0);
      vintage0.setEncomendas(linkedList0);
      // Undeclared exception!
      try { 
        vintage0.avancarTempo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.adicionaUtilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      HashMap<String, Transportadoras> hashMap1 = new HashMap<String, Transportadoras>();
      Vintage vintage0 = null;
      try {
        vintage0 = new Vintage("n|mtCWL3g0d,qd", hashMap0, (List<Encomenda>) null, hashMap1, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vintage vintage0 = null;
      try {
        vintage0 = new Vintage((Vintage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Utilizador> map0 = vintage0.getUtilizadores();
      vintage0.setUtizadores(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = vintage0.getDataPrograma();
      assertNotNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      String string0 = vintage0.getSessaoAtual();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      List<Artigo> list0 = vintage0.getArtigosVenda();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Encomenda encomenda0 = new Encomenda("O`'", list0, 0.0, localDate0, hashMap0);
      vintage0.addEncomenda(encomenda0);
      double double0 = vintage0.totalDinheiroVintage();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Map<String, Double> map0 = vintage0.top10Compradores(localDate0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-427));
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Map<String, Double> map0 = vintage0.top10Compradores(localDate0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      Period period0 = Period.ofWeeks(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        vintage0.top10Vendedores(localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Map<String, Double> map0 = vintage0.top10Vendedores((LocalDate) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "~", "O`'", (String) null, (-127), list0, list0, list0, hashMap0);
      vintage0.adicionaUtilizador(utilizador0);
      List<Artigo> list1 = vintage0.listarVendas("");
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.listarVendas("");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      Transportadoras transportadoras0 = new Transportadoras("", 105.47099, (-155.4547701), true, 2614.55139583);
      hashMap0.put(">x", transportadoras0);
      hashMap0.put((String) null, transportadoras0);
      vintage0.setTransportadoras(hashMap0);
      String string0 = vintage0.calculaMaiorVolFaturacao();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      Transportadoras transportadoras0 = new Transportadoras("", 105.47099, (-155.4547701), true, 2614.55139583);
      hashMap0.put(">x", transportadoras0);
      vintage0.setTransportadoras(hashMap0);
      String string0 = vintage0.calculaMaiorVolFaturacao();
      assertEquals(">x", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      List<Artigo> list0 = vintage0.getArtigosVenda();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("", "~", "O`'", (String) null, (-127), list0, list0, list0, hashMap0);
      vintage0.adicionaUtilizador(utilizador0);
      String string0 = vintage0.calculaMaiorFauracaoIntevalo(localDate0, localDate0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      String string0 = vintage0.calculaMaiorFaturacaoSempre();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      List<Artigo> list0 = vintage0.getArtigosVenda();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      Transportadoras transportadoras0 = new Transportadoras("", 105.47099, (-155.4547701), true, 2614.55139583);
      hashMap0.put(">x", transportadoras0);
      vintage0.setTransportadoras(hashMap0);
      double double0 = vintage0.calculaCustoExpedicao(list0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      Map<Integer, String> map0 = encomenda0.getVendedores();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(165);
      linkedList0.add(integer0);
      vintage0.trataEncomenda(linkedList0, (List<Artigo>) null, map0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setId(165);
      vintage0.addEncomenda(encomenda0);
      vintage0.adiarPrazoLimite(165, 165);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      linkedList0.add(encomenda0);
      vintage0.setEncomendas(linkedList0);
      vintage0.adiarPrazoLimite(1462, 0);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      linkedList0.add(encomenda0);
      vintage0.setEncomendas(linkedList0);
      vintage0.devolverEncomenda((-1));
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      vintage0.avancarTempo();
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      boolean boolean0 = vintage0.existeUser("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.existeUser("41uOT:MaeB", "%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      boolean boolean0 = vintage0.existeEmail("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.existeEmail("x0E.AiG$LYKw`6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      Transportadoras transportadoras0 = new Transportadoras();
      hashMap0.put((String) null, transportadoras0);
      vintage0.setTransportadoras(hashMap0);
      Map<String, Transportadoras> map0 = vintage0.getTransportadorasPremium();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      Transportadoras transportadoras0 = new Transportadoras("", 105.47099, (-155.4547701), true, 2614.55139583);
      hashMap0.put(">x", transportadoras0);
      vintage0.setTransportadoras(hashMap0);
      Map<String, Transportadoras> map0 = vintage0.getTransportadorasPremium();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      List<Artigo> list0 = vintage0.getArtigosVenda();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.equals(vintage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.equals(vintage0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      boolean boolean0 = vintage0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      HashMap<String, Transportadoras> hashMap0 = new HashMap<String, Transportadoras>();
      Transportadoras transportadoras0 = new Transportadoras("", 105.47099, (-155.4547701), true, 2614.55139583);
      hashMap0.put(">x", transportadoras0);
      vintage0.setTransportadoras(hashMap0);
      Map<String, Transportadoras> map0 = vintage0.getTransportadoras();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      linkedList0.add(encomenda0);
      vintage0.setEncomendas(linkedList0);
      List<Encomenda> list0 = vintage0.getEncomendas();
      assertTrue(list0.contains(encomenda0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizador utilizador0 = new Utilizador();
      hashMap0.put("!D+?7oi9", utilizador0);
      // Undeclared exception!
      try { 
        vintage0.setUtizadores(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      String string0 = vintage0.toString();
      assertEquals("----------------------------------------\n               VINTAGE                  \n----------------------------------------\nSess\u00E3o Atual: null\nUtilizadores: {}\nEncomendas: []\nTransportadoras: {}\nData do Programa: 2014-02-14\n", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.getMaiorVolFaturacao("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Malas malas0 = new Malas();
      // Undeclared exception!
      try { 
        vintage0.adicionarPorVender(malas0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Encomenda encomenda0 = new Encomenda();
      vintage0.addEncomenda(encomenda0);
      List<Encomenda> list0 = vintage0.getEncomendasSessaoAtual();
      assertFalse(list0.contains(encomenda0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(4599L);
      vintage0.setDataPrograma(localDate0);
      assertNull(vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.SetSessaoAtual("41uOT:MaeB");
      assertEquals("41uOT:MaeB", vintage0.getSessaoAtual());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.adicionarTransportadora((Transportadoras) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Utilizador utilizador0 = new Utilizador();
      vintage0.adicionaUtilizador(utilizador0);
      // Undeclared exception!
      try { 
        vintage0.getUtilizadores();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.getMaiorFaturacaoSempre("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      // Undeclared exception!
      try { 
        vintage0.getTransportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Vintage", e);
      }
  }
}
