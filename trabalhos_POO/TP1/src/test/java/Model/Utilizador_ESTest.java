/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 00:40:00 GMT 2024
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Artigo;
import Model.Malas;
import Model.Sapatilhas;
import Model.TShirt;
import Model.Utilizador;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("Utilizador: ", "Utilizador: ", "", "Marca: ", 4, linkedList0, linkedList0, linkedList0, hashMap0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      utilizador0.calculaFaturacaoIntervalo((LocalDate) null, localDate0);
      assertEquals("Utilizador: ", utilizador0.getPassword());
      assertEquals(1, utilizador0.getId());
      assertEquals(4, utilizador0.getNif());
      assertEquals("Marca: ", utilizador0.getMorada());
      assertEquals("", utilizador0.getNome());
      assertEquals("Utilizador: ", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Double double0 = new Double((-5593));
      hashMap0.put(localDate0, double0);
      utilizador0.setFaturacao(hashMap0);
      utilizador0.adicionaFaturacao(localDate0, (-5593));
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturacao((LocalDate) null, (-2162));
      Double double0 = new Double(1.0);
      utilizador0.removeFaturacao((LocalDate) null, double0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TShirt tShirt0 = new TShirt();
      tShirt0.setId((-61));
      utilizador0.adicionarPorVender(tShirt0);
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.setVendas(list0);
      utilizador0.removeVenda(1);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TShirt tShirt0 = new TShirt();
      utilizador0.adicionarPorVender(tShirt0);
      Artigo artigo0 = utilizador0.removePorVender(2055);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertNull(artigo0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("anQ^[i`&g2zR(cO", "A:s{?IU\"CA", "Password: ", "", 583, linkedList0, linkedList0, linkedList0, map0);
      Utilizador utilizador2 = new Utilizador(utilizador1);
      assertEquals("anQ^[i`&g2zR(cO", utilizador2.getEmail());
      assertEquals(583, utilizador1.getNif());
      assertEquals(583, utilizador2.getNif());
      assertEquals(0, utilizador0.getNif());
      assertEquals("", utilizador2.getMorada());
      assertEquals("A:s{?IU\"CA", utilizador2.getPassword());
      assertEquals(2, utilizador1.getId());
      assertEquals("Password: ", utilizador2.getNome());
      assertEquals(2, utilizador2.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("T*{q?A?\"3,!1n>Jfq3", "T*{q?A?\"3,!1n>Jfq3", (String) null, "T*{q?A?\"3,!1n>Jfq3", 45, list0, list0, list0, map0);
      Sapatilhas sapatilhas0 = new Sapatilhas();
      utilizador1.adicionaVendas(sapatilhas0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(2, utilizador1.getId());
      assertEquals(45, utilizador1.getNif());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TShirt tShirt0 = new TShirt();
      tShirt0.setNumeroDonos(3488);
      utilizador0.adicionarPorVender(tShirt0);
      Artigo artigo0 = utilizador0.removePorVender(1);
      assertNotNull(artigo0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TShirt tShirt0 = new TShirt();
      tShirt0.setNumeroDonos((-2071));
      utilizador0.adicionarPorVender(tShirt0);
      Artigo artigo0 = utilizador0.removePorVender(1);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertNotNull(artigo0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TShirt tShirt0 = new TShirt();
      tShirt0.setCorrecaoPreco(1.5);
      utilizador0.adicionarPorVender(tShirt0);
      Artigo artigo0 = utilizador0.removePorVender(1);
      assertNotNull(artigo0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.M;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.PALMEIRAS;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "i{ 9x", artigo_Estado0, (-2370), artigo_Avaliação0, "Padrao: ", "/S^T,", "i{ 9x", (-806.3), (-806.3), "(Jif%NY1PgF2\"T9hzpZ");
      utilizador0.adicionarPorVender(tShirt0);
      Artigo artigo0 = utilizador0.removePorVender(1);
      assertNotNull(artigo0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("5wWH", "5wWH", "5wWH", "", 1, linkedList0, linkedList0, linkedList0, hashMap0);
      utilizador0.getVendas();
      assertEquals("5wWH", utilizador0.getPassword());
      assertEquals("5wWH", utilizador0.getNome());
      assertEquals(1, utilizador0.getId());
      assertEquals(1, utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals("5wWH", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Utilizador utilizador0 = new Utilizador();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("m5;Dk%B8tn<Wzgv2)nv", "NORMAL", "NORMAL", "\n", (-917), linkedList0, linkedList0, linkedList0, map0);
      String string0 = utilizador1.getPassword();
      assertEquals("NORMAL", utilizador1.getNome());
      assertEquals(0, utilizador0.getNif());
      assertEquals(2, utilizador1.getId());
      assertEquals("NORMAL", string0);
      assertEquals("m5;Dk%B8tn<Wzgv2)nv", utilizador1.getEmail());
      assertEquals("\n", utilizador1.getMorada());
      assertEquals((-917), utilizador1.getNif());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome((String) null);
      utilizador0.getNome();
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getNome();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNif(2);
      int int0 = utilizador0.getNif();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("+|jt<g6RKP)vi<e-", "", "+|jt<g6RKP)vi<e-", "----------------------------------------\n", (-2162), linkedList0, linkedList0, linkedList0, map0);
      int int0 = utilizador1.getNif();
      assertEquals("----------------------------------------\n", utilizador1.getMorada());
      assertEquals((-2162), int0);
      assertEquals("", utilizador1.getPassword());
      assertEquals("+|jt<g6RKP)vi<e-", utilizador1.getEmail());
      assertEquals(2, utilizador1.getId());
      assertEquals("+|jt<g6RKP)vi<e-", utilizador1.getNome());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada("In");
      utilizador0.getMorada();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setId((-1127));
      int int0 = utilizador0.getId();
      assertEquals((-1127), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      LocalDate localDate0 = MockLocalDate.now();
      Double double0 = new Double(0.0);
      hashMap0.put(localDate0, double0);
      Utilizador utilizador0 = new Utilizador("5wWH", "5wWH", "5wWH", "", 1, linkedList0, linkedList0, linkedList0, hashMap0);
      utilizador0.getFaturacao();
      assertEquals("5wWH", utilizador0.getEmail());
      assertEquals(1, utilizador0.getId());
      assertEquals("5wWH", utilizador0.getPassword());
      assertEquals("5wWH", utilizador0.getNome());
      assertEquals("", utilizador0.getMorada());
      assertEquals(1, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador1 = new Utilizador((String) null, "y", "", (String) null, 0, list0, list0, list0, hashMap0);
      String string0 = utilizador1.getEmail();
      assertEquals("", utilizador1.getNome());
      assertNull(string0);
      assertEquals(2, utilizador1.getId());
      assertEquals("y", utilizador1.getPassword());
      assertEquals(0, utilizador1.getNif());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("T*{q?A?\"3,!1n>Jfq3", "T*{q?A?\"3,!1n>Jfq3", (String) null, "T*{q?A?\"3,!1n>Jfq3", 45, list0, list0, list0, map0);
      String string0 = utilizador1.getEmail();
      assertEquals(0, utilizador0.getNif());
      assertNotNull(string0);
      assertEquals(2, utilizador1.getId());
      assertEquals(45, utilizador1.getNif());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Map<LocalDate, Double> map0 = utilizador0.getFaturacao();
      Utilizador utilizador1 = new Utilizador("+|jt<g6RKP)vi<e-", "", "+|jt<g6RKP)vi<e-", "----------------------------------------\n", (-2162), linkedList0, linkedList0, linkedList0, map0);
      Utilizador utilizador2 = utilizador1.clone();
      assertEquals(1, utilizador0.getId());
      assertEquals("+|jt<g6RKP)vi<e-", utilizador2.getNome());
      assertEquals(2, utilizador2.getId());
      assertEquals((-2162), utilizador2.getNif());
      assertEquals(0, utilizador0.getNif());
      assertEquals("", utilizador2.getPassword());
      assertEquals("+|jt<g6RKP)vi<e-", utilizador2.getEmail());
      assertEquals((-2162), utilizador1.getNif());
      assertEquals("----------------------------------------\n", utilizador2.getMorada());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("5wWH", "5wWH", "5wWH", "", 1, linkedList0, linkedList0, linkedList0, hashMap0);
      assertEquals(1, utilizador0.getId());
      
      utilizador0.setId(0);
      utilizador0.clone();
      assertEquals(0, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getCompras();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador1 = new Utilizador("k{dF!QcdP", "|Y,opn/i}J!QF8'O5", "vWwV", "Material: ", 1680, list0, linkedList0, linkedList0, hashMap0);
      utilizador1.setId((-2226));
      utilizador1.clone();
      assertEquals((-2226), utilizador1.getId());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.now();
      utilizador0.adicionaFaturacao(localDate0, 1709.924963);
      double double0 = utilizador0.calculaFaturacaoSempre();
      assertEquals(0, utilizador0.getNif());
      assertEquals(1709.924963, double0, 0.01);
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturacao((LocalDate) null, (-2573.789318588));
      double double0 = utilizador0.calculaFaturacaoSempre();
      assertEquals((-2573.789318588), double0, 0.01);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setVendas((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setPorVender((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setFaturacao((Map<LocalDate, Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      linkedList0.add((Artigo) null);
      // Undeclared exception!
      try { 
        utilizador0.setCompras(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.removeVenda(2216);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.removeCompras((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.getVendas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturacao((LocalDate) null, (-2573.789318588));
      // Undeclared exception!
      try { 
        utilizador0.calculaFaturacaoIntervalo((LocalDate) null, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.adicionarPorVender((Artigo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.adicionaCompra((Artigo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      linkedList0.add((Artigo) null);
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador("", "", "Kr", "", 0, linkedList0, linkedList0, linkedList0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas malas0 = new Malas();
      utilizador0.adicionarPorVender(malas0);
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.setCompras(list0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      int int0 = utilizador0.getId();
      assertEquals(1, int0);
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getPassword();
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador0 = new Utilizador("5wWH", "5wWH", "5wWH", "", 1, linkedList0, linkedList0, linkedList0, hashMap0);
      String string0 = utilizador0.getNome();
      assertEquals(1, utilizador0.getId());
      assertEquals("5wWH", utilizador0.getEmail());
      assertEquals("5wWH", string0);
      assertEquals(1, utilizador0.getNif());
      assertEquals("", utilizador0.getMorada());
      assertEquals("5wWH", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getEmail();
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getMorada();
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      int int0 = utilizador0.getNif();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturacao((LocalDate) null, (-2573.789318588));
      // Undeclared exception!
      try { 
        utilizador0.removeFaturacao((LocalDate) null, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Double double0 = new Double(0);
      LocalDate localDate0 = MockLocalDate.now();
      utilizador0.removeFaturacao(localDate0, double0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador1 = new Utilizador((String) null, "y", "", (String) null, 0, list0, list0, list0, hashMap0);
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertEquals(0, utilizador0.getNif());
      assertEquals(2, utilizador1.getId());
      assertEquals(0, utilizador1.getNif());
      assertEquals("y", utilizador1.getPassword());
      assertFalse(boolean0);
      assertEquals("", utilizador1.getNome());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals((Object) null);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals(utilizador0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Double double0 = new Double((-1236.2914438));
      boolean boolean0 = utilizador0.equals(double0);
      assertEquals(1, utilizador0.getId());
      assertFalse(boolean0);
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TShirt tShirt0 = new TShirt();
      utilizador0.adicionarPorVender(tShirt0);
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.setVendas(list0);
      utilizador0.removeVenda(0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TShirt tShirt0 = new TShirt();
      utilizador0.adicionarPorVender(tShirt0);
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.setVendas(list0);
      utilizador0.removeVenda(1);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TShirt tShirt0 = new TShirt();
      utilizador0.adicionarPorVender(tShirt0);
      Artigo artigo0 = utilizador0.removePorVender(0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
      assertNull(artigo0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.NORMAL;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.BOM;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-180.0F), "gkaupi;{XXLnC-_$O0>", 556, "", artigo_Estado0, 556, artigo_Avaliação0, "rJi{HYZr]%h", "HVp-dHhD.CLp'cG6[", "RC}]F$2>wJ", (-180.0F), (-1446.9758), "gkaupi;{XXLnC-_$O0>");
      utilizador0.adicionaCompra(malas0);
      List<Artigo> list0 = utilizador0.getCompras();
      utilizador0.setPorVender(list0);
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.removeCompras(list0);
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEmail("----------------------------------------\n               UTILIZADOR               \n----------------------------------------\nUtilizador: 1\nEmail: \nPassword: \nNome: \nMorada: \nNIF: 0\nPor Vender: []\n");
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      double double0 = utilizador0.calculaFaturacaoSempre();
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.toString();
      assertEquals("----------------------------------------\n               UTILIZADOR               \n----------------------------------------\nUtilizador: 1\nEmail: \nPassword: \nNome: \nMorada: \nNIF: 0\nPor Vender: []\n", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      TShirt tShirt0 = new TShirt();
      utilizador0.adicionarPorVender(tShirt0);
      List<Artigo> list0 = utilizador0.getPorVender();
      utilizador0.setVendas(list0);
      utilizador0.getVendas();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<Artigo> list0 = utilizador0.getPorVender();
      HashMap<LocalDate, Double> hashMap0 = new HashMap<LocalDate, Double>();
      Utilizador utilizador1 = new Utilizador((String) null, "y", "", (String) null, 0, list0, list0, list0, hashMap0);
      Utilizador utilizador2 = utilizador1.clone();
      assertEquals(2, utilizador2.getId());
      assertEquals(1, utilizador0.getId());
      assertEquals("", utilizador2.getNome());
      assertEquals(0, utilizador2.getNif());
      assertEquals("y", utilizador2.getPassword());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setPassword("");
      assertEquals(0, utilizador0.getNif());
      assertEquals(1, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setMorada((String) null);
      utilizador0.getMorada();
      assertEquals(1, utilizador0.getId());
      assertEquals(0, utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = null;
      try {
        utilizador1 = new Utilizador(utilizador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.BOM;
      TShirt.Tamanho tShirt_Tamanho0 = TShirt.Tamanho.XL;
      TShirt.Padrao tShirt_Padrao0 = TShirt.Padrao.PALMEIRAS;
      TShirt tShirt0 = new TShirt(tShirt_Tamanho0, tShirt_Padrao0, "gkaupi;{XXLnC-_$O0>", artigo_Estado0, 556, artigo_Avaliação0, "gkaupi;{XXLnC-_$O0>", "", "NIF: ", 556, 556, "");
      // Undeclared exception!
      try { 
        utilizador0.adicionaVendas(tShirt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Utilizador", e);
      }
  }
}
