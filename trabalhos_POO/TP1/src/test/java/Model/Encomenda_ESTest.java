/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 00:39:41 GMT 2024
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Artigo;
import Model.Encomenda;
import Model.Malas;
import Model.Sapatilhas;
import Model.TShirt;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Encomenda_ESTest extends Encomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertNotNull(encomenda1);
      assertTrue(encomenda1.equals((Object)encomenda0));
      
      encomenda1.setPrecoFinal((-2569.671556));
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertEquals((-2569.671556), encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      
      boolean boolean0 = encomenda1.equals(encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertEquals((-2569.671556), encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNotNull(encomenda1);
      assertTrue(encomenda1.equals((Object)encomenda0));
      
      encomenda0.setId(0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda1);
      
      boolean boolean0 = encomenda1.equals(encomenda0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      String string0 = hashMap0.put(integer0, "INo~r-%h,3c");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      encomenda0.setVendedores(hashMap0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Map<Integer, String> map0 = encomenda0.getVendedores();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNotNull(encomenda0);
      
      encomenda0.setTamanho(4);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(4, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      
      int int0 = encomenda0.getTamanho();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(4, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertNotNull(encomenda0);
      
      encomenda0.setTamanho((-1372));
      assertEquals((-1372), encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      
      int int0 = encomenda0.getTamanho();
      assertEquals((-1372), encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals((-1372), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(2);
      assertNotNull(zoneOffset0);
      
      Clock clock0 = MockClock.tickSeconds(zoneOffset0);
      assertNotNull(clock0);
      
      LocalDate localDate0 = MockLocalDate.now(clock0);
      assertNotNull(localDate0);
      
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertNotNull(encomenda0);
      
      Map<Integer, String> map0 = encomenda0.getVendedores();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Encomenda encomenda1 = new Encomenda("Model.Artigo$Estado", linkedList0, 1528.2690075421, localDate0, map0);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(1528.2690075421, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertEquals("Model.Artigo$Estado", encomenda1.getDono());
      assertEquals(1528.2690075421, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      
      double double0 = encomenda1.getPrecoFinal();
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(1528.2690075421, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(2, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertEquals("Model.Artigo$Estado", encomenda1.getDono());
      assertEquals(1528.2690075421, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertNull(encomenda1.getEmbalagem());
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
      assertEquals(1528.2690075421, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNotNull(encomenda0);
      
      encomenda0.setPrecoFinal((-353.121866));
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals((-353.121866), encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      
      double double0 = encomenda0.getPrecoFinal();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals((-353.121866), encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals((-353.121866), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      encomenda0.setPrazoLimite((LocalDate) null);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      
      LocalDate localDate0 = encomenda0.getPrazoLimite();
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertNotNull(encomenda0);
      
      encomenda0.setId(0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getId());
      
      int int0 = encomenda0.getId();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getId());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.setId((-2040));
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals((-2040), encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      int int0 = encomenda0.getId();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals((-2040), encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals((-2040), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNotNull(encomenda0);
      
      encomenda0.setEstado((Encomenda.Estado_Encomenda) null);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      
      encomenda0.getEstado();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNotNull(encomenda0);
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.GRANDE;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem1 = encomenda0.getEmbalagem();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertSame(encomenda_Dimensao_Embalagem1, encomenda_Dimensao_Embalagem0);
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda_Dimensao_Embalagem1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda1);
      assertTrue(encomenda1.equals((Object)encomenda0));
      
      String string0 = encomenda1.getDono();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(string0);
      assertTrue(encomenda0.equals((Object)encomenda1));
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.setDono("EjT\"3U");
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals("EjT\"3U", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      String string0 = encomenda0.getDono();
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals("EjT\"3U", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(string0);
      assertEquals("EjT\"3U", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      encomenda0.setDataCriacao((LocalDate) null);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      
      LocalDate localDate0 = encomenda0.getDataCriacao();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertNotNull(encomenda0);
      
      encomenda0.setCustosExpedicao(4);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(4.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      
      double double0 = encomenda0.getCustosExpedicao();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(4.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1, encomenda0.getId());
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNotNull(encomenda0);
      
      encomenda0.setCustosExpedicao((-781.0));
      assertEquals((-781.0), encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      
      double double0 = encomenda0.getCustosExpedicao();
      assertEquals((-781.0), encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals((-781.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertNotNull(encomenda0);
      
      encomenda0.setTamanho((-941));
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals((-941), encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      
      Encomenda encomenda1 = encomenda0.clone();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals((-941), encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals((-941), encomenda1.getTamanho());
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNull(encomenda1.getDono());
      assertNotNull(encomenda1);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNotNull(encomenda0);
      
      encomenda0.setPrecoFinal(0.5);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.5, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      
      Encomenda encomenda1 = encomenda0.clone();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.5, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda1.getDono());
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertEquals(0.5, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda1);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNotNull(encomenda0);
      
      encomenda0.setId((-2040));
      assertEquals((-2040), encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      
      Encomenda encomenda1 = encomenda0.clone();
      assertEquals((-2040), encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals((-2040), encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertNotNull(encomenda1);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.setCustosExpedicao(0.5);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.5, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      
      Encomenda encomenda1 = encomenda0.clone();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.5, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.5, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertNotNull(encomenda1);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertNotNull(encomenda0);
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2530L);
      assertNotNull(localDate0);
      
      Map<Integer, String> map0 = encomenda0.getVendedores();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Encomenda encomenda1 = new Encomenda("", list0, (-1.0), localDate0, map0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals("", encomenda1.getDono());
      assertEquals((-1.0), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertEquals(2, encomenda1.getId());
      assertEquals((-1.0), encomenda1.getPrecoFinal(), 0.01);
      assertNotNull(encomenda1);
      assertFalse(encomenda1.equals((Object)encomenda0));
      
      Encomenda encomenda2 = encomenda1.clone();
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals("", encomenda1.getDono());
      assertEquals((-1.0), encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda1.getEstado());
      assertEquals(2, encomenda1.getId());
      assertEquals((-1.0), encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda2.getEstado());
      assertEquals(2, encomenda2.getId());
      assertNull(encomenda2.getEmbalagem());
      assertEquals((-1.0), encomenda2.getCustosExpedicao(), 0.01);
      assertEquals((-1.0), encomenda2.getPrecoFinal(), 0.01);
      assertNull(encomenda2.getDono());
      assertEquals(0, encomenda2.getTamanho());
      assertNotNull(encomenda2);
      assertFalse(encomenda0.equals((Object)encomenda1));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda0, encomenda2);
      assertNotSame(encomenda0, encomenda1);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      // Undeclared exception!
      try { 
        encomenda0.setVendedores((Map<Integer, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(1, encomenda0.getId());
      assertNotNull(encomenda0);
      
      // Undeclared exception!
      try { 
        encomenda0.setArtigos((List<Artigo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.setDataCriacao((LocalDate) null);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda1.getId());
      assertNull(encomenda1.getDono());
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda1.getEstado());
      assertNull(encomenda1.getEmbalagem());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda1);
      
      // Undeclared exception!
      try { 
        encomenda1.equals(encomenda0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertNotNull(encomenda0);
      
      Map<Integer, String> map0 = encomenda0.getVendedores();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Encomenda encomenda1 = null;
      try {
        encomenda1 = new Encomenda((String) null, linkedList0, 1917.2877937, (LocalDate) null, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2L);
      assertNotNull(localDate0);
      
      Malas malas0 = new Malas();
      assertNull(malas0.getTransportadora());
      assertEquals(0, malas0.getNumeroDonos());
      assertEquals("", malas0.getCodigo());
      assertNull(malas0.getEstado());
      assertEquals("", malas0.getMaterial());
      assertEquals(0.0, malas0.getCorrecaoPreco(), 0.01);
      assertEquals(0.0F, malas0.getDim(), 0.01F);
      assertEquals("", malas0.getMarca());
      assertEquals(0.0, malas0.getPrecoBase(), 0.01);
      assertEquals(0, malas0.getAno_da_colecao());
      assertEquals(1, malas0.getId());
      assertEquals("", malas0.getDescricao());
      assertNull(malas0.getTipo_mala());
      assertEquals("", malas0.getTipo());
      assertNull(malas0.getAvaliacao());
      assertNotNull(malas0);
      
      boolean boolean0 = linkedList0.add((Artigo) malas0);
      assertEquals(1, linkedList0.size());
      assertNull(malas0.getTransportadora());
      assertEquals(0, malas0.getNumeroDonos());
      assertEquals("", malas0.getCodigo());
      assertNull(malas0.getEstado());
      assertEquals("", malas0.getMaterial());
      assertEquals(0.0, malas0.getCorrecaoPreco(), 0.01);
      assertEquals(0.0F, malas0.getDim(), 0.01F);
      assertEquals("", malas0.getMarca());
      assertEquals(0.0, malas0.getPrecoBase(), 0.01);
      assertEquals(0, malas0.getAno_da_colecao());
      assertEquals(1, malas0.getId());
      assertEquals("", malas0.getDescricao());
      assertNull(malas0.getTipo_mala());
      assertEquals("", malas0.getTipo());
      assertNull(malas0.getAvaliacao());
      assertTrue(boolean0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>(2190);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Encomenda encomenda0 = new Encomenda("", linkedList0, 4255.79, localDate0, hashMap0);
      assertEquals(1, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(4256.04, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals(4255.79, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNotNull(encomenda0);
      
      encomenda0.setArtigos(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(4256.04, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals(4255.79, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      Sapatilhas.Tipos_Sapatilhas sapatilhas_Tipos_Sapatilhas0 = Sapatilhas.Tipos_Sapatilhas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.USADO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      Sapatilhas sapatilhas0 = new Sapatilhas(2172, false, "EXPEDIDA", localDate0, sapatilhas_Tipos_Sapatilhas0, "?n", artigo_Estado0, 2172, artigo_Avaliação0, "", "?n", "EXPEDIDA", 2172, 1667.72522918875, "EXPEDIDA");
      assertEquals(Sapatilhas.Tipos_Sapatilhas.PREMIUM, sapatilhas0.getTiposSapatilhas());
      assertEquals(1667.72522918875, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals("?n", sapatilhas0.getMarca());
      assertEquals("?n", sapatilhas0.getTipo());
      assertEquals(2172, sapatilhas0.getNumeroDonos());
      assertEquals("EXPEDIDA", sapatilhas0.getCor());
      assertEquals(Artigo.Avaliação.SATISFATÓRIO, sapatilhas0.getAvaliacao());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("EXPEDIDA", sapatilhas0.getCodigo());
      assertEquals(Artigo.Estado.USADO, sapatilhas0.getEstado());
      assertEquals("EXPEDIDA", sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(2172.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals(2172, sapatilhas0.getTamanhoNumerico());
      assertNotNull(sapatilhas0);
      
      boolean boolean0 = linkedList0.add((Artigo) sapatilhas0);
      assertEquals(1, linkedList0.size());
      assertEquals(Sapatilhas.Tipos_Sapatilhas.PREMIUM, sapatilhas0.getTiposSapatilhas());
      assertEquals(1667.72522918875, sapatilhas0.getCorrecaoPreco(), 0.01);
      assertFalse(sapatilhas0.getAtilhos());
      assertEquals("?n", sapatilhas0.getMarca());
      assertEquals("?n", sapatilhas0.getTipo());
      assertEquals(2172, sapatilhas0.getNumeroDonos());
      assertEquals("EXPEDIDA", sapatilhas0.getCor());
      assertEquals(Artigo.Avaliação.SATISFATÓRIO, sapatilhas0.getAvaliacao());
      assertEquals(1, sapatilhas0.getId());
      assertEquals("EXPEDIDA", sapatilhas0.getCodigo());
      assertEquals(Artigo.Estado.USADO, sapatilhas0.getEstado());
      assertEquals("EXPEDIDA", sapatilhas0.getTransportadora());
      assertEquals("", sapatilhas0.getDescricao());
      assertEquals(2172.0, sapatilhas0.getPrecoBase(), 0.01);
      assertEquals(2172, sapatilhas0.getTamanhoNumerico());
      assertTrue(boolean0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Encomenda encomenda0 = new Encomenda("N79LkHho9K", linkedList0, 1527.813, localDate0, hashMap0);
      assertEquals(1, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1527.813, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals((-1807449.5358989825), encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals("N79LkHho9K", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getTamanho());
      assertNotNull(encomenda0);
      
      List<Artigo> list0 = encomenda0.getArtigos();
      assertEquals(1, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1527.813, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals((-1807449.5358989825), encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.PEQUENO, encomenda0.getEmbalagem());
      assertEquals(1, encomenda0.getId());
      assertEquals("N79LkHho9K", encomenda0.getDono());
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertEquals(1, encomenda0.getTamanho());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNotNull(encomenda0);
      
      int int0 = encomenda0.getId();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertNotNull(encomenda0);
      
      LocalDate localDate0 = encomenda0.getDataCriacao();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals("", encomenda0.getDono());
      assertNotNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNotNull(encomenda0);
      
      double double0 = encomenda0.getPrecoFinal();
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertNotNull(encomenda0);
      
      double double0 = encomenda0.getCustosExpedicao();
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNotNull(encomenda0);
      
      LocalDate localDate0 = encomenda0.getPrazoLimite();
      assertEquals(1, encomenda0.getId());
      assertEquals("", encomenda0.getDono());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertNotNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertNotNull(encomenda0);
      
      encomenda0.getEmbalagem();
      assertEquals(Encomenda.Estado_Encomenda.PENDENTE, encomenda0.getEstado());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertNull(encomenda0.getEmbalagem());
      assertEquals("", encomenda0.getDono());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      assertNotNull(localDate0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Encomenda encomenda0 = new Encomenda("N79LkHho9K", linkedList0, 1527.813, localDate0, hashMap0);
      assertEquals(0, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1527.813, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(1527.813, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("N79LkHho9K", encomenda0.getDono());
      assertNotNull(encomenda0);
      
      int int0 = encomenda0.getTamanho();
      assertEquals(0, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(1527.813, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(1527.813, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Estado_Encomenda.EXPEDIDA, encomenda0.getEstado());
      assertNull(encomenda0.getEmbalagem());
      assertEquals("N79LkHho9K", encomenda0.getDono());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      TShirt tShirt0 = new TShirt();
      linkedList0.add((Artigo) tShirt0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2665L));
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Encomenda encomenda0 = new Encomenda("", linkedList0, 0.0, localDate0, hashMap0);
      String string0 = encomenda0.toString();
      assertEquals("==========  Encomenda  ==========\nID da Encomenda: 1\nEncomenda criada em: 1962-09-15\nPrazo Limite: 1962-09-17\n==========   Artigos   ==========\nID: 1\nTipo: \nEstado: null\nN\u00FAmero de Donos: 0\nAvalia\u00E7\u00E3o: null\nDescri\u00E7\u00E3o: \nMarca: \nC\u00F3digo: \nPre\u00E7o Base: 0.0\nCorre\u00E7\u00E3o do Pre\u00E7o: 0.0\nTransportadora: null\nTamanho: null\nPadrao: null\nPre\u00E7o Final: 0.0\n\n========== Fim Artigos ==========\nDimens\u00E3o da embalagem: PEQUENO\nCusto Expedi\u00E7\u00E3o: 0.0\nPre\u00E7o final: 0.25\nEstado da encomenda: EXPEDIDA\n", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2602L);
      encomenda1.setDataCriacao(localDate0);
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.setPrecoFinal(2602L);
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertEquals(2602.0, encomenda0.getPrecoFinal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertTrue(encomenda1.equals((Object)encomenda0));
      
      Encomenda.Dimensao_Embalagem encomenda_Dimensao_Embalagem0 = Encomenda.Dimensao_Embalagem.PEQUENO;
      encomenda0.setEmbalagem(encomenda_Dimensao_Embalagem0);
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda();
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertEquals(0.0, encomenda1.getPrecoFinal(), 0.01);
      assertFalse(boolean0);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertEquals(2, encomenda1.getId());
      assertEquals(0.0, encomenda1.getCustosExpedicao(), 0.01);
      assertEquals(0, encomenda1.getTamanho());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertEquals(0, encomenda1.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertTrue(boolean0);
      assertEquals(1, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2634L));
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Encomenda encomenda0 = new Encomenda("~", linkedList0, 0.0, localDate0, hashMap0);
      boolean boolean0 = encomenda0.equals(malas_Tipos_Malas0);
      assertFalse(boolean0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals(1, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      boolean boolean0 = encomenda0.equals(encomenda0);
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertTrue(boolean0);
      assertEquals(0, encomenda0.getTamanho());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      boolean boolean0 = encomenda0.equals((Object) null);
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-2665L), "-.LTZ>?", (-1), "", artigo_Estado0, (-1), artigo_Avaliação0, "1Lmi&cbN6s|qm\".", "", "", (-1.0), (-1), "zC))W#i\"N8`W");
      linkedList0.add((Artigo) malas0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2665L));
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Encomenda encomenda0 = new Encomenda("1Lmi&cbN6s|qm\".", linkedList0, 0.0, localDate0, hashMap0);
      Encomenda encomenda1 = encomenda0.clone();
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(1, encomenda1.getId());
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
      assertEquals((-982.0), encomenda1.getPrecoFinal(), 0.01);
      assertEquals((-982.0), encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda1.getTamanho());
      assertEquals(1, encomenda0.getTamanho());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.SATISFATÓRIO;
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-2665L), "-.LTZ>?", (-1), "", artigo_Estado0, (-1), artigo_Avaliação0, "1Lmi&cbN6s|qm\".", "", "", (-1.0), (-1), "zC))W#i\"N8`W");
      linkedList0.add((Artigo) malas0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2665L));
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Sapatilhas sapatilhas0 = new Sapatilhas();
      linkedList0.add((Artigo) sapatilhas0);
      Encomenda encomenda0 = new Encomenda("1Lmi&cbN6s|qm\".", linkedList0, 0.0, localDate0, hashMap0);
      assertEquals(1, encomenda0.getId());
      assertEquals((-981.75), encomenda0.getPrecoFinal(), 0.01);
      assertEquals(Encomenda.Dimensao_Embalagem.MEDIO, encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Artigo> linkedList0 = new LinkedList<Artigo>();
      TShirt tShirt0 = new TShirt();
      linkedList0.add((Artigo) tShirt0);
      Malas.Tipos_Malas malas_Tipos_Malas0 = Malas.Tipos_Malas.PREMIUM;
      Artigo.Estado artigo_Estado0 = Artigo.Estado.NOVO;
      Artigo.Avaliação artigo_Avaliação0 = Artigo.Avaliação.BOM;
      linkedList0.offer(tShirt0);
      Malas malas0 = new Malas(malas_Tipos_Malas0, (-2665L), "-.LTZ>?", (-1), "", artigo_Estado0, (-1), artigo_Avaliação0, "", "", "", (-1.0), 1.74022213702085, "zC))2W#i\"N8`W");
      linkedList0.add((Artigo) malas0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-2665L));
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      linkedList0.add((Artigo) tShirt0);
      linkedList0.add((Artigo) malas0);
      linkedList0.push(malas0);
      Encomenda encomenda0 = new Encomenda("", linkedList0, 0.0, localDate0, hashMap0);
      assertEquals(5123.334082457893, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(1, encomenda0.getId());
      assertEquals(Encomenda.Dimensao_Embalagem.GRANDE, encomenda0.getEmbalagem());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getDono();
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda.Estado_Encomenda encomenda_Estado_Encomenda0 = encomenda0.getEstado();
      encomenda0.setEstado(encomenda_Estado_Encomenda0);
      assertEquals(1, encomenda0.getId());
      assertEquals(0.0, encomenda0.getPrecoFinal(), 0.01);
      assertEquals(0, encomenda0.getTamanho());
      assertEquals(0.0, encomenda0.getCustosExpedicao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1, encomenda0.getId());
      
      encomenda0.setId(0);
      encomenda0.clone();
      assertEquals(0, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      // Undeclared exception!
      try { 
        encomenda1.getVendedores();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }
}
