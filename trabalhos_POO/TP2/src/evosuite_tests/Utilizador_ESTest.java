/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 16:35:04 GMT 2024
 */

package projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.time.LocalDate;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;
import projeto.Dimensao;
import projeto.Encomenda;
import projeto.Fatura;
import projeto.Utilizador;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      utilizador1.equals(utilizador0);
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Set<String> set0 = utilizador0.removeCarrinho();
      utilizador0.setProdutosVender(set0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long(1487L);
      Utilizador utilizador0 = new Utilizador("\n", (String) null, "]KOiA{xfh}", long0, "");
      utilizador0.insereNovoArtigo("");
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("]KOiA{xfh}", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("", utilizador0.getPassword());
      assertEquals("\n", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getPassword();
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", string0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("O artigo ", (String) null, "]", long0, (String) null);
      String string0 = utilizador0.getNome();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("O artigo ", utilizador0.getEmail());
      assertEquals("]", utilizador0.getMorada());
      assertNull(string0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long long0 = new Long(812L);
      Utilizador utilizador0 = new Utilizador("Grande", "Grande", "Grande", long0, "8Tok9=Gx<f(T8");
      String string0 = utilizador0.getNome();
      assertEquals("Grande", string0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("8Tok9=Gx<f(T8", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("Grande", utilizador0.getMorada());
      assertEquals("Grande", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNif(2L);
      long long0 = utilizador0.getNif();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setN_vendidos(3632);
      int int0 = utilizador0.getN_vendidos();
      assertEquals(3632, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setN_comprados(1986);
      int int0 = utilizador0.getN_comprados();
      assertEquals(1986, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setN_comprados((-623));
      int int0 = utilizador0.getN_comprados();
      assertEquals((-623), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Long long0 = new Long(3L);
      Utilizador utilizador0 = new Utilizador("]KOiA{xfh}", " Email: ", (String) null, long0, (String) null);
      String string0 = utilizador0.getMorada();
      assertEquals(" Email: ", utilizador0.getNome());
      assertNull(string0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("]KOiA{xfh}", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador(" j\u00E1 foi comprada", " j\u00E1 foi comprada", "-[c*C_D:f0-~", long0, " j\u00E1 foi comprada");
      utilizador0.getFaturasVendas();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("-[c*C_D:f0-~", utilizador0.getMorada());
      assertEquals(" j\u00E1 foi comprada", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(" j\u00E1 foi comprada", utilizador0.getNome());
      assertEquals(" j\u00E1 foi comprada", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, "\"oWdGhD", long0, "\"oWdGhD");
      String string0 = utilizador0.getEmail();
      assertNull(string0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getEmail();
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", string0);
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utilizador.setCodigo((-1414L));
      long long0 = Utilizador.getCodigo();
      assertEquals((-1414L), long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("P_O]/5A");
      utilizador0.getCarrinho();
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.ofYearDay(1, 1);
      utilizador0.atualizaEncomenda(localDate0);
      Encomenda encomenda0 = utilizador0.getCarrinho();
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(1L, encomenda0.getIdComprador());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utilizador.setCodigo((-1610L));
      long long0 = Utilizador.criaCodigo();
      assertEquals((-1610L), long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador.setCodigo((-1414L));
      Long long0 = new Long(0L);
      Utilizador utilizador1 = new Utilizador("", "", " Morada: ", long0, " Morada: ");
      int int0 = utilizador0.compareTo(utilizador1);
      assertEquals((-1413L), utilizador0.getCodigo());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utilizador.setCodigo(0L);
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador(">vHE TQ<d", ">vHE TQ<d", "Custo dos produtos: ", long0, ">vHE TQ<d");
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals(1L, utilizador1.getCodigo());
      assertEquals(">vHE TQ<d", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("Custo dos produtos: ", utilizador1.getMorada());
      assertEquals(">vHE TQ<d", utilizador1.getEmail());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(">vHE TQ<d", utilizador1.getNome());
      assertNotSame(utilizador1, utilizador0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utilizador.setCodigo((-1414L));
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("", "", " Morada: ", long0, " Morada: ");
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals((-1414L), utilizador0.getId());
      assertEquals((-1414L), utilizador1.getId());
      assertEquals((-1413L), utilizador1.getCodigo());
      assertEquals(" Morada: ", utilizador1.getMorada());
      assertNotSame(utilizador1, utilizador0);
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("", utilizador1.getNome());
      assertEquals(" Morada: ", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("", utilizador1.getEmail());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Long long0 = new Long(2098L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      assertEquals(2L, utilizador0.getCodigo());
      
      Utilizador.setCodigo(0);
      utilizador0.clone();
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador.setCodigo((-1086L));
      utilizador0.clone();
      assertEquals((-1086L), utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("P_O]/5A");
      Set<String> set0 = utilizador0.artigosCarrinho();
      utilizador0.numeroArtigos(set0);
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo((String) null);
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setPendentes((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setFaturasVendas((Map<Long, Fatura>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Long long0 = new Long(276L);
      Utilizador utilizador0 = new Utilizador("L=gz2 co&L2C", "L=gz2 co&L2C", "Gg7@{Y", long0, "Venda\n");
      // Undeclared exception!
      try { 
        utilizador0.setFaturasCompras((Map<Long, Fatura>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setDevolvidos((Set<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.setComprei((Set<Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador(">vHE TQ<d", ">vHE TQ<d", "Custo dos produtos: ", long0, ">vHE TQ<d");
      // Undeclared exception!
      try { 
        utilizador0.setCarrinho((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.numeroArtigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      // Undeclared exception!
      try { 
        utilizador1.equals(utilizador0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Long long0 = new Long((-6068L));
      Utilizador utilizador0 = new Utilizador("\"oWdGhD", "\"oWdGhD", "\"oWdGhD", long0, "\"oWdGhD");
      // Undeclared exception!
      try { 
        utilizador0.compareTo((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador("Rq,c?K#", "Rq,c?K#", "Rq,c?K#", (Long) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Long long0 = new Long((-5352L));
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      long long1 = utilizador0.getNif();
      assertEquals((-5352L), long1);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.getMorada();
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", string0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      int int0 = utilizador0.getN_vendidos();
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("Da1.p,Z[w/@8oK", " Faturas dos artigos comprados: ", "", long0, "");
      String string0 = utilizador0.getPassword();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("Da1.p,Z[w/@8oK", utilizador0.getEmail());
      assertEquals(" Faturas dos artigos comprados: ", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("", string0);
      assertEquals("", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = Utilizador.criaCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Long long0 = new Long((-16L));
      Utilizador utilizador0 = new Utilizador("", " n\u00E3o existe na encomenda", "", long0, "");
      String string0 = utilizador0.getEmail();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", string0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(" n\u00E3o existe na encomenda", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Long long0 = new Long(2098L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      utilizador0.getNome();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      long long0 = utilizador0.getId();
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(1L, long0);
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador(" j\u00E1 foi comprada", " j\u00E1 foi comprada", "-[c*C_D:f0-~", long0, " j\u00E1 foi comprada");
      int int0 = utilizador0.getN_comprados();
      assertEquals(" j\u00E1 foi comprada", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("-[c*C_D:f0-~", utilizador0.getMorada());
      assertEquals(0, int0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(" j\u00E1 foi comprada", utilizador0.getPassword());
      assertEquals(" j\u00E1 foi comprada", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getDevolvidos();
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getPendentes();
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(true, 0, (-49L), "lKB>d2", 0.0, false, (-49L), 2571.9494311838);
      utilizador0.imprimeFaturasVendas();
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.imprimeFaturasVendas();
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.imprimeFaturasCompras();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(true, (-2626), (-3372L), "", 1L, false, (-3372L), (-2626));
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      int int0 = utilizador0.compareTo(utilizador0);
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, int0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador("0SOp)", "0SOp)", "0SOp)", long0, "23H{+Bgu");
      utilizador0.setN_comprados(1);
      Utilizador utilizador1 = new Utilizador();
      int int0 = utilizador0.compareTo(utilizador1);
      assertEquals(3L, utilizador0.getCodigo());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.compreiToDevolvido((-4243L));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A encomenda -4243 n\u00E3o foi comprada
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.verificaComprei((-1687L));
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(2L, utilizador0.getCodigo());
      assertFalse(boolean0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.ofYearDay(1, 1);
      try { 
        utilizador0.finalizaEncomenda(localDate0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O carrinho est\u00E1 vazio!
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.pendenteToAvenda("xfp");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo xfp n\u00E3o existe no carrinho
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.pendenteToVendido(" Faturas dos artigos vendidos: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  Faturas dos artigos vendidos:  n\u00E3o existe no carrinho
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.vendidoToaVenda("`r4vC~!M*Jx");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo `r4vC~!M*Jx n\u00E3o foi vendido
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo(" <Oht8`n");
      utilizador0.aVendaToPendente(" <Oht8`n");
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.aVendaToPendente("Utilizador:: {C\u00F3digo: 1 Email: n/d Nome: n/d Morada: n/d Pass: n/d Nif: -1 Artigos comprados: 0 Artigos vendidos: 0 Id dos artigos vendidos: java.util.HashSet@0000000016 Id dos artigos a vender: java.util.HashSet@0000000017 Id das artigos pendentes: java.util.HashSet@0000000018 Id dos artigos comprados: java.util.HashSet@0000000019 Id dos artigos devolvidos: java.util.HashSet@0000000020 Faturas dos artigos comprados: java.util.HashMap@0000000021 Faturas dos artigos vendidos: java.util.HashMap@0000000022 Carrinho: Encomenda:: { Artigos: java.util.HashSet@0000000023 C\u00F3digo: 3 Dimens\u00E3o: Pequeno Estado: Pendente Data de cria\u00E7\u00E3o: N/A  Data de entrega: N/A} }");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo Utilizador:: {C\u00F3digo: 1 Email: n/d Nome: n/d Morada: n/d Pass: n/d Nif: -1 Artigos comprados: 0 Artigos vendidos: 0 Id dos artigos vendidos: java.util.HashSet@0000000016 Id dos artigos a vender: java.util.HashSet@0000000017 Id das artigos pendentes: java.util.HashSet@0000000018 Id dos artigos comprados: java.util.HashSet@0000000019 Id dos artigos devolvidos: java.util.HashSet@0000000020 Faturas dos artigos comprados: java.util.HashMap@0000000021 Faturas dos artigos vendidos: java.util.HashMap@0000000022 Carrinho: Encomenda:: { Artigos: java.util.HashSet@0000000023 C\u00F3digo: 3 Dimens\u00E3o: Pequeno Estado: Pendente Data de cria\u00E7\u00E3o: N/A  Data de entrega: N/A} } n\u00E3o se encontra \u00E0 venda
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo((String) null);
      utilizador0.eliminaArtigo((String) null);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.eliminaArtigo((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo null n\u00E3o se encontra \u00E0 venda
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.insereNovoArtigo(" <Oht8`n");
      try { 
        utilizador0.insereNovoArtigo(" <Oht8`n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  <Oht8`n j\u00E1 se encontra \u00E0 venda
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador(" j\u00E1 foi comprada", " j\u00E1 foi comprada", "-[c*C_D:f0-~", long0, " j\u00E1 foi comprada");
      utilizador0.insereNovoArtigo("/t<Ds46K=");
      utilizador0.getProdutosVender();
      assertEquals(" j\u00E1 foi comprada", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(" j\u00E1 foi comprada", utilizador0.getPassword());
      assertEquals("-[c*C_D:f0-~", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(" j\u00E1 foi comprada", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      utilizador0.adicionaFaturaComprador(false, 3422L, 1L, set0, 0, 2857.906, 0.0);
      utilizador1.equals(utilizador0);
      assertEquals((-1L), utilizador1.getNif());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(1L, utilizador0.getId());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador0.adicionaFaturaVendedor(true, 0, 0, "lKB>d2", 0.0, true, 0, 2571.9494311838);
      utilizador1.equals(utilizador0);
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals("n/d", utilizador1.getNome());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = utilizador0.clone();
      utilizador0.setNif(700L);
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertEquals(700L, utilizador0.getNif());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador();
      utilizador0.equals(utilizador1);
      assertEquals(3L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Map<Long, Fatura> map0 = utilizador0.getFaturasCompras();
      boolean boolean0 = utilizador0.equals(map0);
      assertEquals((-1L), utilizador0.getNif());
      assertFalse(boolean0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      boolean boolean0 = utilizador0.equals((Object) null);
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertFalse(boolean0);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador(" j\u00E1 foi comprada", " j\u00E1 foi comprada", "-[c*C_D:f0-~", long0, " j\u00E1 foi comprada");
      boolean boolean0 = utilizador0.equals(utilizador0);
      assertEquals("-[c*C_D:f0-~", utilizador0.getMorada());
      assertEquals(" j\u00E1 foi comprada", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(" j\u00E1 foi comprada", utilizador0.getPassword());
      assertEquals(" j\u00E1 foi comprada", utilizador0.getEmail());
      assertTrue(boolean0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaFaturaVendedor(true, 0L, 0L, "$f1-#4ze{cS_rx", (-1.0), true, (-1.0), 0L);
      Map<Long, Fatura> map0 = utilizador0.getFaturasVendas();
      utilizador0.setFaturasCompras(map0);
      utilizador0.imprime1FaturaCompra(0L);
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      utilizador0.adicionaFaturaComprador(false, 3422L, 1L, set0, 0, 2857.906, 0.0);
      Map<Long, Fatura> map0 = utilizador0.getFaturasCompras();
      utilizador0.setFaturasVendas(map0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      utilizador0.adicionaFaturaComprador(true, (-2204), 1528L, linkedHashSet0, (-1L), 1528L, (-2204));
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals("n/d", utilizador1.getPassword());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(2L, utilizador1.getCodigo());
      assertNotSame(utilizador1, utilizador0);
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(1L, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Long long0 = new Long(2098L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      utilizador0.adicionaFaturaVendedor(true, (-218L), 3043L, "", 0.0, true, 1.0, 1603.8102642980125);
      Utilizador utilizador1 = utilizador0.clone();
      assertNotSame(utilizador1, utilizador0);
      assertEquals(2098L, utilizador1.getNif());
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_vendidos());
      assertEquals(1L, utilizador1.getId());
      assertEquals(2098L, utilizador0.getNif());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador1.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("Da1.p,Z[w/@8oK", " Faturas dos artigos comprados: ", "", long0, "");
      Set<Long> set0 = utilizador0.getComprei();
      utilizador0.setComprei(set0);
      assertEquals("", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("Da1.p,Z[w/@8oK", utilizador0.getEmail());
      assertEquals(" Faturas dos artigos comprados: ", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.imprime1FaturaVenda(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Long long0 = new Long(20L);
      Utilizador utilizador0 = new Utilizador("y=EH.J4r+68ZpbS:", "y=EH.J4r+68ZpbS:", "y=EH.J4r+68ZpbS:", long0, "y=EH.J4r+68ZpbS:");
      Set<String> set0 = utilizador0.artigosCarrinho();
      utilizador0.numeroArtigos(set0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertEquals("n/d", utilizador0.getMorada());
      
      utilizador0.setMorada("$qx1N(RPr+JoFB");
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador(" j\u00E1 existe na encomenda", "", "|>E)yp0HQR", long0, "");
      assertEquals("", utilizador0.getNome());
      
      utilizador0.setNome(" j\u00E1 existe na encomenda");
      assertEquals(2L, utilizador0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Long long0 = new Long(2098L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      utilizador0.setId(1635L);
      assertEquals(1635L, utilizador0.getId());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.adicionaArtigo("");
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador(" j\u00E1 existe na encomenda", "", "|>E)yp0HQR", long0, "");
      assertEquals("", utilizador0.getPassword());
      
      utilizador0.setPassword("");
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(" j\u00E1 existe na encomenda", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("|>E)yp0HQR", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.toString();
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Long long0 = new Long(1L);
      Utilizador utilizador0 = new Utilizador(" j\u00E1 existe na encomenda", "", "|>E)yp0HQR", long0, "");
      Encomenda encomenda0 = new Encomenda();
      Set<String> set0 = encomenda0.removeTudo();
      utilizador0.setProdutosVendidos(set0);
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("", utilizador0.getPassword());
      assertEquals(" j\u00E1 existe na encomenda", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("", utilizador0.getNome());
      assertEquals("|>E)yp0HQR", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.get1FaturaVenda(0);
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      utilizador0.setPendentes(set0);
      utilizador0.getPendentes();
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Long long0 = new Long(2098L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      Set<Long> set0 = utilizador0.getComprei();
      utilizador0.setDevolvidos(set0);
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Long long0 = new Long(0L);
      Utilizador utilizador0 = new Utilizador("Da1.p,Z[w/@8oK", " Faturas dos artigos comprados: ", "", long0, "");
      utilizador0.get1FaturaCompra((-1));
      assertEquals(" Faturas dos artigos comprados: ", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("Da1.p,Z[w/@8oK", utilizador0.getEmail());
      assertEquals("", utilizador0.getMorada());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.imprime1FaturaCompra((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.removeArtigo((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo null n\u00E3o existe na encomenda
         //
         verifyException("projeto.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Long long0 = new Long(2098L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      utilizador0.setEmail("");
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.novoCarrinho();
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Long long0 = new Long(2098L);
      Utilizador utilizador0 = new Utilizador("", "", "", long0, "");
      // Undeclared exception!
      try { 
        utilizador0.setProdutosVender((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LocalDate localDate0 = MockLocalDate.ofYearDay(1, 1);
      Set<String> set0 = utilizador0.getProdutosVender();
      Dimensao dimensao0 = Dimensao.Grande;
      Encomenda encomenda0 = new Encomenda(set0, 1, dimensao0, localDate0);
      utilizador0.setCarrinho(encomenda0);
      assertEquals("n/d", utilizador0.getNome());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = utilizador0.clone();
      utilizador0.novoCarrinho();
      boolean boolean0 = utilizador1.equals(utilizador0);
      assertEquals(2L, utilizador1.getCodigo());
      assertEquals(0, utilizador1.getN_comprados());
      assertEquals((-1L), utilizador1.getNif());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador1.getNome());
      assertEquals(1L, utilizador1.getId());
      assertEquals("n/d", utilizador1.getEmail());
      assertEquals("n/d", utilizador1.getMorada());
      assertEquals(1L, utilizador0.getId());
      assertEquals(0, utilizador1.getN_vendidos());
      assertFalse(boolean0);
      assertEquals("n/d", utilizador1.getPassword());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getIdCarrinho();
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals(0, utilizador0.getN_comprados());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setN_vendidos((-2204));
      utilizador0.clone();
      assertEquals((-2204), utilizador0.getN_vendidos());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = Utilizador.getCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Set<String> set0 = utilizador0.removeCarrinho();
      utilizador0.adicionaFaturaComprador(false, 404L, 404L, set0, (-716.3), (-716.3), (-1.0));
      utilizador0.imprimeFaturasCompras();
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Set<String> set0 = utilizador0.getProdutosVendidos();
      utilizador0.adicionaFaturaComprador(false, 0L, (-639L), set0, 0L, (-1.0), (-639L));
      assertEquals(2L, utilizador0.getCodigo());
      assertEquals(0, utilizador0.getN_vendidos());
      assertEquals("n/d", utilizador0.getMorada());
      assertEquals((-1L), utilizador0.getNif());
      assertEquals("n/d", utilizador0.getNome());
      assertEquals("n/d", utilizador0.getPassword());
      assertEquals("n/d", utilizador0.getEmail());
      assertEquals(0, utilizador0.getN_comprados());
  }
}
