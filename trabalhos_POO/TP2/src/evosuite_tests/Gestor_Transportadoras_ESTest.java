/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 16:33:57 GMT 2024
 */

package projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import projeto.Gestor_Transportadoras;
import projeto.Transportadora;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gestor_Transportadoras_ESTest extends Gestor_Transportadoras_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(0L);
      Transportadora transportadora0 = new Transportadora("", 0L, 0L, 0L, 0L, 0L, false, (-1990));
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add(long0);
      double double0 = gestor_Transportadoras0.precoTransporte(linkedList0);
      assertFalse(linkedList0.contains(0L));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long((-4187L));
      Transportadora transportadora0 = new Transportadora();
      Long long1 = new Long(3735L);
      Transportadora transportadora1 = new Transportadora("H]7BrcUl7QEL(F.,", (-1933.0), (-4187L), (-1933.0), 0.0, 3735L, true, (-2140396241));
      transportadora1.setMargemlucro((-1103.4573799303305));
      transportadora1.preco_transportadora2(2);
      hashMap0.put(long1, transportadora1);
      hashMap0.put(long0, transportadora0);
      gestor_Transportadoras0.setTransportadoras(hashMap0);
      String string0 = gestor_Transportadoras0.fatorouMais();
      assertEquals("Transportadora:: { Id: 2 Nome: H]7BrcUl7QEL(F., Valor da encomenda pequena: -1933.0 Valor da encomenda m\u00E9dia: -4187.0 Valor da encomenda grande: -1933.0 Imposto: 0.0 Margem de lucro: -1103.4573799303305 \u00C9 premium: true Formula atual: -2140396241 Total lucro: 3231192.334837806}", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      gestor_Transportadoras0.criaTransportadora("", 0.0, (-1182L), 0.0, (-1182L), (-1182L), false, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = Long.getLong("1) (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9\n2) (ValorBase * (1 + MargemLucroTransportadora + Imposto)) * 0,7", (-1L));
      Transportadora transportadora0 = new Transportadora();
      hashMap0.put(long0, transportadora0);
      gestor_Transportadoras0.setTransportadoras(hashMap0);
      gestor_Transportadoras0.alteraFormula((-1L), (-180));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(0L);
      Transportadora transportadora0 = new Transportadora("", 0L, 0L, 0L, 0L, 0L, false, (-1990));
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      long long1 = gestor_Transportadoras0.removeTransportadora(0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long((-587L));
      Transportadora transportadora0 = new Transportadora();
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      long long1 = gestor_Transportadoras0.removeTransportadora((-587L));
      assertEquals((-587L), long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      hashMap0.put((Long) null, (Transportadora) null);
      // Undeclared exception!
      try { 
        gestor_Transportadoras0.setTransportadoras(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      // Undeclared exception!
      try { 
        gestor_Transportadoras0.fatorouMais();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = null;
      try {
        gestor_Transportadoras0 = new Gestor_Transportadoras((Gestor_Transportadoras) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = null;
      try {
        gestor_Transportadoras0 = new Gestor_Transportadoras((Map<Long, Transportadora>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      gestor_Transportadoras0.criaTransportadora("{~l@", (-587L), 1209.44002210254, 1209.44002210254, 1209.44002210254, 0.0, true, 2630);
      String string0 = gestor_Transportadoras0.transportadorasPremium();
      assertEquals("Transportadora:: { Id: 1 Nome: {~l@ Valor da encomenda pequena: -587.0 Valor da encomenda m\u00E9dia: 1209.44002210254 Valor da encomenda grande: 1209.44002210254 Imposto: 1209.44002210254 Margem de lucro: 0.0 \u00C9 premium: true Formula atual: 2630 Total lucro: 0.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(0L);
      Transportadora transportadora0 = new Transportadora();
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      String string0 = gestor_Transportadoras0.transportadorasPremium();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(0L);
      Transportadora transportadora0 = new Transportadora("", 0L, 0L, 0L, 0L, 0L, false, 5);
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      String string0 = gestor_Transportadoras0.transportadorasNormais();
      assertEquals("Transportadora:: { Id: 1 Nome:  Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 0.0 \u00C9 premium: false Formula atual: 5 Total lucro: 0.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      gestor_Transportadoras0.criaTransportadora("}", (-190.539688864), (-190.539688864), (-190.539688864), (-1715.1953581), (-190.539688864), true, (-293));
      String string0 = gestor_Transportadoras0.transportadorasNormais();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(0L);
      Transportadora transportadora0 = new Transportadora("", 0L, 0L, 0L, 0L, 0L, true, (-1990));
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraPremium(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(0L);
      Transportadora transportadora0 = new Transportadora("", 0L, 0L, 0L, 0L, 0L, false, 5);
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraPremium(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraPremium(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(0L);
      Transportadora transportadora0 = new Transportadora("", 0L, 0L, 0L, 0L, 0L, false, 5);
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraNormal(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      gestor_Transportadoras0.criaTransportadora("}", (-190.539688864), (-190.539688864), (-190.539688864), (-1715.1953581), (-190.539688864), true, (-293));
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraNormal(1L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadoraNormal((-293));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(0L);
      Transportadora transportadora0 = new Transportadora("", 0L, 0L, 0L, 0L, 0L, false, 5);
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadora(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      boolean boolean0 = gestor_Transportadoras0.existe_transpotadora((-1177L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(0L);
      linkedList0.add(long0);
      // Undeclared exception!
      try { 
        gestor_Transportadoras0.precoTransporte(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long((-4187L));
      Transportadora transportadora0 = new Transportadora();
      Long long1 = new Long(3735L);
      Transportadora transportadora1 = new Transportadora("H]7BrcUl7QEL(F.,", (-4187L), (-4187L), (-4187L), 0.0, 3735L, true, (-2140396241));
      transportadora1.preco_transportadora2(2);
      hashMap0.put(long1, transportadora1);
      hashMap0.put(long0, transportadora0);
      gestor_Transportadoras0.setTransportadoras(hashMap0);
      String string0 = gestor_Transportadoras0.fatorouMais();
      assertEquals("Transportadora:: { Id: 1 Nome: Transportadora Invalida Valor da encomenda pequena: 0.0 Valor da encomenda m\u00E9dia: 0.0 Valor da encomenda grande: 0.0 Imposto: 0.0 Margem de lucro: 0.0 \u00C9 premium: false Formula atual: 0 Total lucro: 0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(1097L);
      Transportadora transportadora0 = new Transportadora();
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      long long1 = gestor_Transportadoras0.removeTransportadora(1097L);
      assertEquals(1097L, long1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      try { 
        gestor_Transportadoras0.removeTransportadora(0L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A transportadora com ID 0 n\u00E3o existe
         //
         verifyException("projeto.Gestor_Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      Gestor_Transportadoras gestor_Transportadoras1 = new Gestor_Transportadoras();
      boolean boolean0 = gestor_Transportadoras0.equals(gestor_Transportadoras1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      boolean boolean0 = gestor_Transportadoras0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      boolean boolean0 = gestor_Transportadoras0.equals(gestor_Transportadoras0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      boolean boolean0 = gestor_Transportadoras0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      Map<Long, Transportadora> map0 = gestor_Transportadoras0.getTransportadoras();
      gestor_Transportadoras0.setTransportadoras(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(0L);
      Transportadora transportadora0 = new Transportadora();
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      Map<Long, Transportadora> map0 = gestor_Transportadoras0.getTransportadoras();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Long long0 = new Long(0L);
      Transportadora transportadora0 = new Transportadora("", 0L, 0L, 0L, 0L, 0L, false, 5);
      hashMap0.put(long0, transportadora0);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add(long0);
      double double0 = gestor_Transportadoras0.precoTransporte(linkedList0);
      assertFalse(linkedList0.contains(0L));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      String string0 = gestor_Transportadoras0.formulasDisponiveis();
      assertEquals("1) (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9\n2) (ValorBase * (1 + MargemLucroTransportadora + Imposto)) * 0,7\n3) (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 1,5", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      String string0 = gestor_Transportadoras0.formulasNormais();
      assertEquals("1) (ValorBase * MargemLucroTransportadora * (1 + Imposto)) * 0,9\n2) (ValorBase * (1 + MargemLucroTransportadora + Imposto)) * 0,7", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      Gestor_Transportadoras gestor_Transportadoras1 = gestor_Transportadoras0.clone();
      assertNotSame(gestor_Transportadoras1, gestor_Transportadoras0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Long, Transportadora> hashMap0 = new HashMap<Long, Transportadora>();
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras(hashMap0);
      String string0 = gestor_Transportadoras0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      Gestor_Transportadoras gestor_Transportadoras1 = new Gestor_Transportadoras(gestor_Transportadoras0);
      assertTrue(gestor_Transportadoras1.equals((Object)gestor_Transportadoras0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      // Undeclared exception!
      try { 
        gestor_Transportadoras0.alteraFormula((-1397L), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Transportadoras", e);
      }
  }
}
