/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 16:37:41 GMT 2024
 */

package projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import projeto.Artigo;
import projeto.Controlador;
import projeto.Encomenda;
import projeto.GestorEncomendas;
import projeto.Gestor_Artigos;
import projeto.Gestor_Transportadoras;
import projeto.Gestor_Utilizadores;
import projeto.Menu;
import projeto.Utilizador;
import projeto.Vintage;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controlador_ESTest extends Controlador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Menu menu0 = new Menu();
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage(vintage0);
      Controlador controlador0 = new Controlador(menu0, vintage1);
      Vintage vintage2 = controlador0.getVintage();
      assertFalse(vintage2.equals((Object)vintage0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Gestor_Artigos gestor_Artigos1 = new Gestor_Artigos(gestor_Artigos0);
      HashMap<Long, Utilizador> hashMap1 = new HashMap<Long, Utilizador>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Map<String, Long> map1 = gestor_Utilizadores0.getIdUtilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(hashMap1, map0, map1);
      GestorEncomendas gestorEncomendas0 = new GestorEncomendas();
      Map<Long, Encomenda> map2 = gestorEncomendas0.getEncomendas();
      GestorEncomendas gestorEncomendas1 = new GestorEncomendas(map2);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      Vintage vintage0 = new Vintage(gestor_Artigos1, gestor_Utilizadores1, gestorEncomendas1, gestor_Transportadoras0, (Menu) null, 1981);
      Controlador controlador0 = new Controlador((Menu) null, vintage0);
      Vintage vintage1 = controlador0.getVintage();
      assertSame(vintage1, vintage0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Gestor_Artigos gestor_Artigos1 = new Gestor_Artigos(gestor_Artigos0);
      HashMap<Long, Utilizador> hashMap1 = new HashMap<Long, Utilizador>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Gestor_Utilizadores gestor_Utilizadores0 = new Gestor_Utilizadores();
      Gestor_Utilizadores gestor_Utilizadores1 = new Gestor_Utilizadores(gestor_Utilizadores0);
      Map<String, Long> map1 = gestor_Utilizadores1.getIdUtilizadores();
      Gestor_Utilizadores gestor_Utilizadores2 = new Gestor_Utilizadores(hashMap1, map0, map1);
      GestorEncomendas gestorEncomendas0 = new GestorEncomendas();
      Map<Long, Encomenda> map2 = gestorEncomendas0.getEncomendas();
      GestorEncomendas gestorEncomendas1 = new GestorEncomendas(map2);
      Gestor_Transportadoras gestor_Transportadoras0 = new Gestor_Transportadoras();
      Vintage vintage0 = new Vintage(gestor_Artigos1, gestor_Utilizadores2, gestorEncomendas1, gestor_Transportadoras0, (Menu) null, 1981);
      Controlador controlador0 = new Controlador((Menu) null, vintage0);
      Vintage vintage1 = controlador0.getVintage();
      assertSame(vintage0, vintage1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vintage vintage0 = Vintage.load();
      Controlador controlador0 = new Controlador((Menu) null, vintage0);
      Controlador controlador1 = new Controlador(controlador0);
      // Undeclared exception!
      try { 
        controlador1.escolha_venda_tshirt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Controlador", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Menu menu0 = new Menu();
      Vintage.carregarEstado();
      Controlador controlador0 = new Controlador(menu0, (Vintage) null);
      // Undeclared exception!
      try { 
        controlador0.povoar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Controlador", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.escolha_sapatilhas();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.parsing();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      Controlador controlador1 = new Controlador(controlador0);
      // Undeclared exception!
      try { 
        controlador0.escolha_faturas();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.escolha_faturas();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.inicio_controlador();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Controlador controlador0 = null;
      try {
        controlador0 = new Controlador((Controlador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Controlador", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Controlador controlador0 = new Controlador((Menu) null, (Vintage) null);
      // Undeclared exception!
      try { 
        controlador0.escolha_venda();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Controlador", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      Controlador controlador1 = new Controlador(controlador0);
      controlador0.povoar();
      // Undeclared exception!
      try { 
        controlador0.escolha_carrinho();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.registar();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      vintage0.VintageFaturou();
      vintage0.imprimeFormulasNormais();
      Controlador controlador0 = new Controlador((Menu) null, vintage0);
      // Undeclared exception!
      try { 
        controlador0.escolha_tipo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Controlador", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage(vintage0);
      Controlador controlador0 = new Controlador((Menu) null, vintage1);
      // Undeclared exception!
      try { 
        controlador0.escolha_venda_malas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Controlador", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Menu menu0 = new Menu();
      menu0.meusArtigos();
      Vintage vintage0 = Vintage.load();
      Controlador controlador0 = new Controlador(menu0, vintage0);
      controlador0.salvarEstado();
      menu0.print_tirar_produtos_venda();
      // Undeclared exception!
      try { 
        controlador0.escolha_tipo();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.escolha_tipo();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      controlador0.salvarEstado();
      Controlador controlador1 = new Controlador(controlador0);
      // Undeclared exception!
      try { 
        controlador1.escolha_tshit();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.escolha_transportadora();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Menu menu0 = new Menu();
      Controlador controlador0 = new Controlador(menu0, (Vintage) null);
      // Undeclared exception!
      try { 
        controlador0.inicio_controlador();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Controlador", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.escolha_query();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Menu menu0 = new Menu();
      menu0.vendedor_facturou();
      Controlador controlador0 = new Controlador(menu0, (Vintage) null);
      // Undeclared exception!
      try { 
        controlador0.salvarEstado();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Controlador", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Menu menu0 = new Menu();
      Vintage.carregarEstado();
      Controlador controlador0 = new Controlador(menu0, (Vintage) null);
      Controlador controlador1 = new Controlador(controlador0);
      // Undeclared exception!
      try { 
        controlador1.salvarEstado();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Controlador", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.escolha_venda();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      controlador0.povoar();
      // Undeclared exception!
      try { 
        controlador0.escolha_tshit();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.escolha_venda_tipo();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Menu menu0 = new Menu();
      Vintage.carregarEstado();
      Controlador controlador0 = new Controlador(menu0, (Vintage) null);
      // Undeclared exception!
      try { 
        controlador0.escolha_malas();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Menu menu0 = new Menu();
      Controlador controlador0 = new Controlador(menu0, (Vintage) null);
      Controlador controlador1 = new Controlador(controlador0);
      assertFalse(controlador1.equals((Object)controlador0));
      
      // Undeclared exception!
      try { 
        controlador1.escolha_tshit();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Menu menu0 = new Menu();
      Vintage vintage0 = Vintage.load();
      Controlador controlador0 = new Controlador(menu0, vintage0);
      Controlador controlador1 = new Controlador(controlador0);
      // Undeclared exception!
      try { 
        controlador1.inicio_controlador();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.escolha_malas();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.escolha_pesquica();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Controlador controlador0 = new Controlador();
      // Undeclared exception!
      try { 
        controlador0.escolha();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Menu menu0 = new Menu();
      Vintage vintage0 = Vintage.load();
      Controlador controlador0 = new Controlador(menu0, vintage0);
      // Undeclared exception!
      try { 
        controlador0.escolha();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Menu menu0 = new Menu();
      Vintage vintage0 = new Vintage();
      Vintage vintage1 = new Vintage(vintage0);
      Controlador controlador0 = new Controlador(menu0, vintage1);
      // Undeclared exception!
      try { 
        controlador0.inicio_controlador();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Vintage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("dados.ser");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Menu menu0 = new Menu();
      Vintage vintage0 = Vintage.load();
      Controlador controlador0 = new Controlador(menu0, vintage0);
      Controlador controlador1 = new Controlador(controlador0);
      // Undeclared exception!
      try { 
        controlador0.escolha_carrinho();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vintage vintage0 = new Vintage();
      Controlador controlador0 = new Controlador((Menu) null, vintage0);
      // Undeclared exception!
      try { 
        controlador0.escolha_venda_tipo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Controlador", e);
      }
  }
}
