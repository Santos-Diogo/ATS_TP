/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 16:36:18 GMT 2024
 */

package projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.chrono.IsoChronology;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;
import projeto.Artigo;
import projeto.Dimensao;
import projeto.Encomenda;
import projeto.Gestor_Artigos;
import projeto.Mala;
import projeto.Padrao;
import projeto.Tamanho;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Gestor_Artigos_ESTest extends Gestor_Artigos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = new Boolean(false);
      gestor_Artigos0.criar_artigo_mala(" Tamanho: ", " Tamanho: ", 0.0, false, (-2225), (-2225), (-1L), (-1L), (-2225), " Tamanho: ", 2608, boolean0, (-2225));
      String string0 = gestor_Artigos0.pesquisar_artigos_ano_colecao((-2225));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf("V2N%CIZZ3");
      gestor_Artigos0.criar_artigo_mala("projeto.Gestor_Artigos", " Id da transportadora: ", 0.0, false, (-1), (-1), (-1), (-1), (-1), "projeto.Gestor_Artigos", (-1), boolean0, (-1.0F));
      String string0 = gestor_Artigos0.pesquisar_artigos_dimens√£o_mala(1542);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1L));
      gestor_Artigos0.criar_artigo_sapatilhas("", "", 0.0, true, 1, 621, long0, 3786L, 389, true, "", 2608, true, 621);
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho_sapatilhas(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf("V2N%CIZZ3");
      gestor_Artigos0.criar_artigo_mala("projeto.Gestor_Artigos", " Id da transportadora: ", 0.0, false, (-1), (-1), (-1), (-1), (-1), "projeto.Gestor_Artigos", (-1), boolean0, (-1.0F));
      gestor_Artigos0.alteraDataToInicio("A1");
      assertEquals(0.5, gestor_Artigos0.getTaxaNovo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.XL;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt(";D !Yw0'g{#?", "", 0, false, 0, 1, 0, long0, tamanho0, padrao0);
      Long long1 = gestor_Artigos0.id_artigo_para_id_vendedor("A1");
      assertTrue(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf(false);
      gestor_Artigos0.criar_artigo_mala("", "Seh#eMiEeF~-C}&4L", 244.431848790701, false, 1421, 1421, 1421, 1421, 300, "Seh#eMiEeF~-C}&4L", 187, boolean0, 544.07F);
      Long long0 = gestor_Artigos0.id_artigo_para_id_vendedor("A1");
      assertEquals(1421L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Gestor_Artigos.setTaxaUsado(0.0);
      double double0 = Gestor_Artigos.getTaxaUsado();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Gestor_Artigos.setTaxaNovo(0.0);
      double double0 = Gestor_Artigos.getTaxaNovo();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Map<String, Artigo> map0 = gestor_Artigos0.getArtigos();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Gestor_Artigos.setTaxaNovo((-1805));
      Gestor_Artigos gestor_Artigos1 = gestor_Artigos0.clone();
      assertEquals((-1805.0), gestor_Artigos1.getTaxaNovo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1));
      gestor_Artigos0.criar_artigo_sapatilhas("CBX!zH?v1v? ", "", 0.0, true, 1941, (-1), long0, (-344L), 1941, true, "", (-1), true, 1941);
      String string0 = gestor_Artigos0.artigoToString("A1");
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: CBX!zH?v1v?  Marca:  Pre\u00E7o base: 0.0 Novo: true Estado de uso: 1941 N\u00FAmero de utilizadores: -1 Disponivel: true Id da transportadora: -1 Id do vendedor: -344 } Tamanho: 1941 Atacadores: true Cor:  Data da Cole\u00E7\u00E3o: -1 Premium: true Desconto: 1941.0}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      gestor_Artigos0.setArtigos((Map<String, Artigo>) null);
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_novo_tshirt((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      gestor_Artigos0.setArtigos((Map<String, Artigo>) null);
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_novo_sapatilhas(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = new Boolean(true);
      gestor_Artigos0.criar_artigo_mala("", "", 860.5665231885, true, (-1372), (-1372), (-1L), (-1L), (-1372), "A1", (-1372), boolean0, (-1L));
      // Undeclared exception!
      try { 
        gestor_Artigos0.mostrar_gestor((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Mala", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Tamanho tamanho0 = Tamanho.S;
      Padrao padrao0 = Padrao.palmeiras;
      // Undeclared exception!
      try { 
        gestor_Artigos0.criar_artigo_tshirt("L", "", 0.0, false, 10, 0, 10, (Long) null, tamanho0, padrao0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.criar_artigo_sapatilhas("", "LU|2~GN9 KAMay", (-3991.00569), false, 2459, 0, (Long) null, 1L, 39, false, " Id do vendedor: ", 0, true, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Artigo", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      // Undeclared exception!
      try { 
        gestor_Artigos0.criar_artigo_mala("Ws", " b4", 752, true, 450, 1, 1, 1, 752, " b4", (-1), (Boolean) null, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      gestor_Artigos0.setArtigos((Map<String, Artigo>) null);
      // Undeclared exception!
      try { 
        gestor_Artigos0.colocar_disponivel_artigo("O artigo ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = null;
      try {
        gestor_Artigos0 = new Gestor_Artigos((Gestor_Artigos) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = new Boolean(" Tamanho: ");
      gestor_Artigos0.criar_artigo_mala(" Tamanho: ", " Tamanho: ", 0.0, false, (-2225), (-2225), (-1L), (-1L), (-2225), " Tamanho: ", 2608, boolean0, (-2225));
      Map<String, Artigo> map0 = gestor_Artigos0.getArtigos();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Gestor_Artigos gestor_Artigos1 = new Gestor_Artigos(gestor_Artigos0);
      assertTrue(gestor_Artigos1.equals((Object)gestor_Artigos0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        gestor_Artigos0.entreDatas(set0, localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Encomenda encomenda0 = new Encomenda();
      Set<String> set0 = encomenda0.removeTudo();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-932L));
      int int0 = gestor_Artigos0.entreDatas(set0, localDate0, localDate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf(false);
      gestor_Artigos0.criar_artigo_mala("", "Seh#eMiEeF~-C}&4L", 244.431848790701, false, 1421, 1421, 1421, 1421, 300, "Seh#eMiEeF~-C}&4L", 187, boolean0, 544.07F);
      double double0 = gestor_Artigos0.vintageFaturou();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(set0);
      Period period0 = Period.of(1, 1, 1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.precoFaturouTempo(linkedHashSet0, localDate0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      double double0 = gestor_Artigos0.precoFaturouTempo(set0, (LocalDate) null, (LocalDate) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("O artigo ");
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        gestor_Artigos0.precoFaturou(linkedHashSet0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LocalDate localDate0 = MockLocalDate.now();
      double double0 = gestor_Artigos0.precoFaturou(set0, localDate0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      LocalDate localDate0 = MockLocalDate.now();
      // Undeclared exception!
      try { 
        gestor_Artigos0.vendaTotal(linkedHashSet0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LocalDate localDate0 = MockLocalDate.now();
      double double0 = gestor_Artigos0.vendaTotal(set0, localDate0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Dimensao dimensao0 = Dimensao.Medio;
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda encomenda0 = new Encomenda(set0, 0L, dimensao0, localDate0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.alteraData(encomenda0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Encomenda encomenda0 = new Encomenda();
      gestor_Artigos0.alteraData(encomenda0);
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1));
      gestor_Artigos0.criar_artigo_sapatilhas("CBX!zH?v1v? ", "", 0.0, true, 1941, (-1), long0, (-344L), 1941, true, "", (-1), true, 1941);
      long long1 = gestor_Artigos0.colocar_disponivel_artigo("A1");
      assertEquals((-344L), long1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      try { 
        gestor_Artigos0.colocar_disponivel_artigo("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  n\u00E3o existe!
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("", "F:>[4P?N", 474.0, true, 4, (-2487), 4, (-1L), 4, "", 2, boolean0, (-2487));
      long long0 = gestor_Artigos0.tirar_disponivel_artigo("A1");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      try { 
        gestor_Artigos0.tirar_disponivel_artigo("l#osbGzZ.0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo l#osbGzZ.0 n\u00E3o existe!
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.TRUE;
      String string0 = gestor_Artigos0.criar_artigo_mala(" Padr\u00E3o: ", " Z~O@9. P%", 5267, false, (-1), 10, (-474L), (-1L), (-463), "s=P0-y\"-Wh", 10, boolean0, (-1));
      String string1 = gestor_Artigos0.pesquisar_artigos_ano_colecao(10);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala(" Padr\u00E3o: ", " Z~O@9. P%", 5267, false, (-1), 10, (-474L), (-1L), (-463), "s=P0-y\"-Wh", (-2067), boolean0, (-1));
      String string0 = gestor_Artigos0.pesquisar_artigos_ano_colecao(10);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.XL;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt(";D !Yw0'g{#?", "", 0, false, 0, 1, 0, long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_ano_colecao(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf(false);
      gestor_Artigos0.criar_artigo_mala("", "Seh#eMiEeF~-C}&4L", 244.431848790701, false, 1421, 1421, 1421, 1421, 300, "Seh#eMiEeF~-C}&4L", 187, boolean0, 544.07F);
      String string0 = gestor_Artigos0.pesquisar_artigos_material("|lcml&r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.XL;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt(";D !Yw0'g{#?", "", 0, false, 0, 1, 0, long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_material("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      Padrao padrao1 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("", "A1", (-1.0), true, 3, 1, 120L, long0, tamanho0, padrao1);
      String string0 = gestor_Artigos0.pesquisar_artigos_padrao(padrao0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf(false);
      String string0 = gestor_Artigos0.criar_artigo_mala("", "Seh#eMiEeF~-C}&4L", 244.431848790701, false, 1421, 1421, 1421, 1421, 300, "Seh#eMiEeF~-C}&4L", 187, boolean0, 544.07F);
      Padrao padrao0 = Padrao.riscas;
      String string1 = gestor_Artigos0.pesquisar_artigos_padrao(padrao0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1411L));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("EC", "EC", (-1371.0), false, 1766, (-1908874352), (-287), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_padrao(padrao0);
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: EC Marca: EC Pre\u00E7o base: -1371.0 Novo: false Estado de uso: 1766 N\u00FAmero de utilizadores: -1908874352 Disponivel: true Id da transportadora: -287 Id do vendedor: -1411 } Tamanho: L Padr\u00E3o: liso}\n", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(0L);
      gestor_Artigos0.criar_artigo_sapatilhas("myDs\u0000UfNF>=8o!1L9", "myDs\u0000UfNF>=8o!1L9", 0.0, true, (-1), 0, long0, (-1), 0, false, "", 0, false, 0.0);
      String string0 = gestor_Artigos0.pesquisar_artigos_cor("");
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: myDs\u0000UfNF>=8o!1L9 Marca: myDs\u0000UfNF>=8o!1L9 Pre\u00E7o base: 0.0 Novo: true Estado de uso: -1 N\u00FAmero de utilizadores: 0 Disponivel: true Id da transportadora: 0 Id do vendedor: -1 } Tamanho: 0 Atacadores: false Cor:  Data da Cole\u00E7\u00E3o: 0 Premium: false Desconto: 0.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("", "", 2298.614498014, false, 1, 1, (-903L), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_cor("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf(false);
      gestor_Artigos0.criar_artigo_mala(" Padr\u00E3o: ", " Z~O@9. P%", 193.5060670698, false, (-1), 10, (-474L), (-1L), (-463), "s=P0-y\"-Wh", (-2067), boolean0, (-1));
      String string0 = gestor_Artigos0.pesquisar_artigos_dimens√£o_mala((-2067));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(0L);
      String string0 = gestor_Artigos0.criar_artigo_sapatilhas("\u20AC ", "\u20AC ", (-1.0), false, 6735, 6735, long0, 0L, 6735, false, "o", 340, false, (-3055.8148751));
      String string1 = gestor_Artigos0.pesquisar_artigos_dimens√£o_mala((-1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf("V2N%CIZZ3");
      gestor_Artigos0.criar_artigo_mala("projeto.Gestor_Artigos", " Id da transportadora: ", 0.0, false, (-1), (-1), (-1), (-1), (-1), "projeto.Gestor_Artigos", (-1), boolean0, (-1.0F));
      String string0 = gestor_Artigos0.pesquisar_artigos_dimens√£o_mala((-1));
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: projeto.Gestor_Artigos Marca:  Id da transportadora:  Pre\u00E7o base: 0.0 Novo: false Estado de uso: -1 N\u00FAmero de utilizadores: -1 Disponivel: true Id da transportadora: -1 Id do vendedor: -1 } Dimens\u00E3o: -1 Material: projeto.Gestor_Artigos Ano da Cole\u00E7\u00E3o: -1 Premium: false Valoriza\u00E7\u00E3o: -1.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1411L));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", (String) null, (-1371.0), false, (-287), (-287), 1L, long0, tamanho0, padrao0);
      Tamanho tamanho1 = Tamanho.S;
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho__tshit(tamanho1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-72));
      Tamanho tamanho0 = Tamanho.XL;
      String string0 = gestor_Artigos0.criar_artigo_sapatilhas("", (String) null, 0.0, false, 105, 105, long0, (-709L), 1425, false, "", 1425, false, 1425);
      String string1 = gestor_Artigos0.pesquipesquisar_artigos_tamanho__tshit(tamanho0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1411L));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", (String) null, (-1371.0), false, (-287), (-287), 1L, long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho__tshit(tamanho0);
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o:  Marca: null Pre\u00E7o base: -1371.0 Novo: false Estado de uso: -287 N\u00FAmero de utilizadores: -287 Disponivel: true Id da transportadora: 1 Id do vendedor: -1411 } Tamanho: L Padr\u00E3o: liso}\n", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(0L);
      gestor_Artigos0.criar_artigo_sapatilhas("myDs\u0000UfNF>=8o!1L9", "myDs\u0000UfNF>=8o!1L9", 0.38142101111915905, true, (-1), 1, long0, (-1), 1, false, "", 1, false, 0.38142101111915905);
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho_sapatilhas(1);
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: myDs\u0000UfNF>=8o!1L9 Marca: myDs\u0000UfNF>=8o!1L9 Pre\u00E7o base: 0.38142101111915905 Novo: true Estado de uso: -1 N\u00FAmero de utilizadores: 1 Disponivel: true Id da transportadora: 0 Id do vendedor: -1 } Tamanho: 1 Atacadores: false Cor:  Data da Cole\u00E7\u00E3o: 1 Premium: false Desconto: 0.38142101111915905}\n", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(0L);
      gestor_Artigos0.criar_artigo_sapatilhas("myDs\u0000UfNF>=8o!1L9", "myDs\u0000UfNF>=8o!1L9", 0.0, true, (-1), 0, long0, (-1), 0, false, "", 0, false, 0.0);
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho_sapatilhas(1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.XL;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt(";D !Yw0'g{#?", "", 0, false, 0, 1, 0, long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquipesquisar_artigos_tamanho_sapatilhas(3);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      gestor_Artigos0.criar_artigo_mala("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: ;D !Yw0'g{#? Marca:  Pre\u00E7o base: 0.0 Novo: false Estado de uso: 0 N\u00FAmero de utilizadores: 1 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Tamanho: XL Padr\u00E3o: liso}\n", "T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: ;D !Yw0'g{#? Marca:  Pre\u00E7o base: 0.0 Novo: false Estado de uso: 0 N\u00FAmero de utilizadores: 1 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Tamanho: XL Padr\u00E3o: liso}\n", (-3651L), false, 0, 0, 0, 0L, 0, "", 0, boolean0, (-3651L));
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_mala(boolean0);
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: ;D !Yw0'g{#? Marca:  Pre\u00E7o base: 0.0 Novo: false Estado de uso: 0 N\u00FAmero de utilizadores: 1 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Tamanho: XL Padr\u00E3o: liso}\n Marca: T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: ;D !Yw0'g{#? Marca:  Pre\u00E7o base: 0.0 Novo: false Estado de uso: 0 N\u00FAmero de utilizadores: 1 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Tamanho: XL Padr\u00E3o: liso}\n Pre\u00E7o base: -3651.0 Novo: false Estado de uso: 0 N\u00FAmero de utilizadores: 0 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Dimens\u00E3o: 0 Material:  Ano da Cole\u00E7\u00E3o: 0 Premium: false Valoriza\u00E7\u00E3o: -3651.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      gestor_Artigos0.criar_artigo_mala("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: ;D !Yw0'g{#? Marca:  Pre\u00E7o base: 0.0 Novo: false Estado de uso: 0 N\u00FAmero de utilizadores: 1 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Tamanho: XL Padr\u00E3o: liso}\n", "T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: ;D !Yw0'g{#? Marca:  Pre\u00E7o base: 0.0 Novo: false Estado de uso: 0 N\u00FAmero de utilizadores: 1 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Tamanho: XL Padr\u00E3o: liso}\n", (-3651L), false, 0, 0, 0, 0L, 0, "", 0, boolean0, (-3651L));
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_mala(boolean0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.XL;
      Padrao padrao0 = Padrao.liso;
      String string0 = gestor_Artigos0.criar_artigo_tshirt(";D !Yw0'g{#?", "", 0, false, 0, 1, 0, long0, tamanho0, padrao0);
      Boolean boolean0 = Boolean.TRUE;
      String string1 = gestor_Artigos0.pesquisar_artigos_novo_mala(boolean0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.palmeiras;
      gestor_Artigos0.criar_artigo_tshirt("", "", 2298.614498014, false, 1, 1, (-903L), long0, tamanho0, padrao0);
      Boolean boolean0 = Boolean.TRUE;
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_tshirt(boolean0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf("V2N%CIZZ3");
      String string0 = gestor_Artigos0.criar_artigo_mala("projeto.Gestor_Artigos", " Id da transportadora: ", 0.0, false, (-1), (-1), (-1), (-1), (-1), "projeto.Gestor_Artigos", (-1), boolean0, (-1.0F));
      String string1 = gestor_Artigos0.pesquisar_artigos_novo_tshirt(boolean0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(0L);
      gestor_Artigos0.criar_artigo_sapatilhas("myDs\u0000UfNF>=8o!1L9", "myDs\u0000UfNF>=8o!1L9", 0.0, true, (-1), 0, long0, (-1), 0, false, "", 0, false, 0.0);
      Boolean boolean0 = Boolean.TRUE;
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_sapatilhas(boolean0);
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: myDs\u0000UfNF>=8o!1L9 Marca: myDs\u0000UfNF>=8o!1L9 Pre\u00E7o base: 0.0 Novo: true Estado de uso: -1 N\u00FAmero de utilizadores: 0 Disponivel: true Id da transportadora: 0 Id do vendedor: -1 } Tamanho: 0 Atacadores: false Cor:  Data da Cole\u00E7\u00E3o: 0 Premium: false Desconto: 0.0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(0L);
      gestor_Artigos0.criar_artigo_sapatilhas("myDs\u0000UfNF>=8o!1L9", "myDs\u0000UfNF>=8o!1L9", 0.38142101111915905, true, (-1), 1, long0, (-1), 1, false, "", 1, false, 0.38142101111915905);
      Boolean boolean0 = new Boolean("A1");
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_sapatilhas(boolean0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.XL;
      Padrao padrao0 = Padrao.liso;
      String string0 = gestor_Artigos0.criar_artigo_tshirt(";D !Yw0'g{#?", "", 0, false, 0, 1, 0, long0, tamanho0, padrao0);
      Boolean boolean0 = Boolean.TRUE;
      String string1 = gestor_Artigos0.pesquisar_artigos_novo_sapatilhas(boolean0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf("V2N%CIZZ3");
      gestor_Artigos0.criar_artigo_mala("projeto.Gestor_Artigos", " Id da transportadora: ", 0.0, false, (-1), (-1), (-1), (-1), (-1), "projeto.Gestor_Artigos", (-1), boolean0, (-1.0F));
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_mala("V2N%CIZZ3");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.XL;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt(";D !Yw0'g{#?", "", 0, false, 0, 1, 0, long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_mala("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.riscas;
      gestor_Artigos0.criar_artigo_tshirt("", "1z@:!", (-15.33208834537632), true, 357, 357, (-3459L), long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_tshirt((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      String string0 = gestor_Artigos0.criar_artigo_mala("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: ;D !Yw0'g{#? Marca:  Pre\u00E7o base: 0.0 Novo: false Estado de uso: 0 N\u00FAmero de utilizadores: 1 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Tamanho: XL Padr\u00E3o: liso}\n", "T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: ;D !Yw0'g{#? Marca:  Pre\u00E7o base: 0.0 Novo: false Estado de uso: 0 N\u00FAmero de utilizadores: 1 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Tamanho: XL Padr\u00E3o: liso}\n", (-3651L), false, 0, 0, 0, 0L, 0, "", 0, boolean0, (-3651L));
      String string1 = gestor_Artigos0.pesquisar_artigos_marca_tshirt("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Long long0 = new Long(0L);
      Tamanho tamanho0 = Tamanho.XL;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt(";D !Yw0'g{#?", "", 0, false, 0, 1, 0, long0, tamanho0, padrao0);
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_tshirt("");
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: ;D !Yw0'g{#? Marca:  Pre\u00E7o base: 0.0 Novo: false Estado de uso: 0 N\u00FAmero de utilizadores: 1 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Tamanho: XL Padr\u00E3o: liso}\n", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(0L);
      gestor_Artigos0.criar_artigo_sapatilhas("\u20AC ", "\u20AC ", (-1.0), false, 6735, 6735, long0, 0L, 6735, false, "o", 340, false, (-3055.8148751));
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_sapatilha("\u20AC ");
      assertEquals("Sapatilhas:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o: \u20AC  Marca: \u20AC  Pre\u00E7o base: -1.0 Novo: false Estado de uso: 6735 N\u00FAmero de utilizadores: 6735 Disponivel: true Id da transportadora: 0 Id do vendedor: 0 } Tamanho: 6735 Atacadores: false Cor: o Data da Cole\u00E7\u00E3o: 340 Premium: false Desconto: -3055.8148751}\n", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(0L);
      gestor_Artigos0.criar_artigo_sapatilhas("\u20AC ", "\u20AC ", (-1.0), false, 6735, 6735, long0, 0L, 6735, false, "o", 340, false, (-3055.8148751));
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_sapatilha((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf("V2N%CIZZ3");
      gestor_Artigos0.criar_artigo_mala("projeto.Gestor_Artigos", " Id da transportadora: ", 0.0, false, (-1), (-1), (-1), (-1), (-1), "projeto.Gestor_Artigos", (-1), boolean0, (-1.0F));
      String string0 = gestor_Artigos0.pesquisar_artigos_marca_sapatilha((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Mala mala0 = new Mala();
      boolean boolean0 = gestor_Artigos0.equals(mala0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      boolean boolean0 = gestor_Artigos0.equals(gestor_Artigos0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      boolean boolean0 = gestor_Artigos0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      boolean boolean0 = gestor_Artigos0.pesquisar_artigo_id(" n\u00E3o existe!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf(false);
      gestor_Artigos0.criar_artigo_mala("", "Seh#eMiEeF~-C}&4L", 244.431848790701, false, 1421, 1421, 1421, 1421, 300, "Seh#eMiEeF~-C}&4L", 187, boolean0, 544.07F);
      boolean boolean1 = gestor_Artigos0.pesquisar_artigo_id("A1");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Padrao padrao0 = Padrao.palmeiras;
      Double double0 = Double.valueOf((double) 0);
      Long long0 = new Long(0);
      Mala mala0 = new Mala(" Padr\u00E3o: ", "projeto.Gestor_Artigos", double0, false, 0, 0, long0, long0, 0, "a2am(J:*s-", 3, false, 1005.0F);
      Tamanho tamanho0 = Tamanho.L;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(536L);
      gestor_Artigos0.criar_artigo_tshirt("", "", 0.0, false, (-109), (-109), 919L, (Long) mala0.contador, tamanho0, padrao0);
      String string0 = gestor_Artigos0.mostrar_gestor(localDate0);
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A2 Descri\u00E7\u00E3o:  Marca:  Pre\u00E7o base: 0.0 Novo: false Estado de uso: -109 N\u00FAmero de utilizadores: -109 Disponivel: true Id da transportadora: 919 Id do vendedor: 2 } Tamanho: L Padr\u00E3o: palmeiras} Pre\u00E7o atual: 0.00\u20AC \n\n", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(536L);
      String string0 = gestor_Artigos0.mostrar_gestor(localDate0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = Boolean.valueOf(false);
      gestor_Artigos0.criar_artigo_mala("", "Seh#eMiEeF~-C}&4L", 244.431848790701, false, 1421, 1421, 1421, 1421, 300, "Seh#eMiEeF~-C}&4L", 187, boolean0, 544.07F);
      String string0 = gestor_Artigos0.toString();
      assertEquals("Mala:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o:  Marca: Seh#eMiEeF~-C}&4L Pre\u00E7o base: 244.431848790701 Novo: false Estado de uso: 1421 N\u00FAmero de utilizadores: 1421 Disponivel: true Id da transportadora: 1421 Id do vendedor: 1421 } Dimens\u00E3o: 300 Material: Seh#eMiEeF~-C}&4L Ano da Cole\u00E7\u00E3o: 187 Premium: false Valoriza\u00E7\u00E3o: 544.07}\n", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      String string0 = gestor_Artigos0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Boolean boolean0 = new Boolean(true);
      gestor_Artigos0.criar_artigo_mala("2'26", "2'26", 1315.96, true, 0, 0, 0, 0, 1, "2'26", (-2171), boolean0, 1.0F);
      Gestor_Artigos gestor_Artigos1 = gestor_Artigos0.clone();
      assertEquals(0.5, gestor_Artigos1.getTaxaNovo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      // Undeclared exception!
      try { 
        gestor_Artigos0.id_artigo_para_id_transportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long(0L);
      gestor_Artigos0.criar_artigo_sapatilhas("A1", "A1", 1315.96, true, 0, (-2168), long0, (-2309L), (-2168), false, "2'26", 1, true, (-2171));
      String string0 = gestor_Artigos0.pesquisar_artigos_cor("A2");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.alteraDataToInicio("projeto.Tshirt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      double double0 = Gestor_Artigos.getTaxaUsado();
      assertEquals(0.25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Long long0 = new Long((-1411L));
      Tamanho tamanho0 = Tamanho.L;
      Padrao padrao0 = Padrao.liso;
      gestor_Artigos0.criar_artigo_tshirt("", (String) null, (-1371.0), false, (-287), (-287), 1L, long0, tamanho0, padrao0);
      Boolean boolean0 = Boolean.valueOf("n'Lxvb\"W^8");
      String string0 = gestor_Artigos0.pesquisar_artigos_novo_tshirt(boolean0);
      assertEquals("T-shirt:: {Artigo:: { C\u00F3digo de barras: A1 Descri\u00E7\u00E3o:  Marca: null Pre\u00E7o base: -1371.0 Novo: false Estado de uso: -287 N\u00FAmero de utilizadores: -287 Disponivel: true Id da transportadora: 1 Id do vendedor: -1411 } Tamanho: L Padr\u00E3o: liso}\n", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Gestor_Artigos.setTaxaNovo(0.0);
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      Gestor_Artigos gestor_Artigos1 = gestor_Artigos0.clone();
      assertEquals(0.0, gestor_Artigos1.getTaxaNovo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HashMap<Integer, Artigo> hashMap0 = new HashMap<Integer, Artigo>();
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos(hashMap0);
      // Undeclared exception!
      try { 
        gestor_Artigos0.artigoToString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      // Undeclared exception!
      try { 
        gestor_Artigos0.id_artigo_para_id_vendedor("\"X9!wSqDA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      gestor_Artigos0.setArtigos((Map<String, Artigo>) null);
      // Undeclared exception!
      try { 
        gestor_Artigos0.pesquisar_artigos_marca_tshirt("projeto.Tshirt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Gestor_Artigos", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      double double0 = Gestor_Artigos.getTaxaNovo();
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Gestor_Artigos gestor_Artigos0 = new Gestor_Artigos();
      Gestor_Artigos gestor_Artigos1 = gestor_Artigos0.clone();
      boolean boolean0 = gestor_Artigos1.equals(gestor_Artigos0);
      assertTrue(boolean0);
  }
}
