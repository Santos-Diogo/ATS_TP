/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 16:35:43 GMT 2024
 */

package projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Month;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.chrono.ThaiBuddhistDate;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;
import projeto.Dimensao;
import projeto.Encomenda;
import projeto.Estado;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomenda_ESTest extends Encomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Encomenda encomenda0 = new Encomenda(set0, 1969L, dimensao0, localDate0);
      encomenda0.setDataEntrega(localDate0);
      Encomenda.setDiasDevolver(0);
      boolean boolean0 = encomenda0.podeDevolver(localDate0);
      assertEquals(0, encomenda0.getDiasDevolver());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Set<String> set0 = encomenda0.getEncomenda();
      Dimensao dimensao0 = Dimensao.Grande;
      Encomenda encomenda1 = new Encomenda(set0, 816L, dimensao0, (LocalDate) null);
      boolean boolean0 = encomenda1.equals(encomenda0);
      assertEquals(3L, encomenda0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Encomenda encomenda0 = new Encomenda(set0, (-3221L), dimensao0, localDate0);
      Set<String> set1 = encomenda0.removeTudo();
      assertFalse(set1.isEmpty());
      
      encomenda0.removeTudo();
      assertEquals((-3221L), encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Dimensao dimensao0 = Dimensao.Medio;
      linkedHashSet0.add((String) null);
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda encomenda0 = new Encomenda(linkedHashSet0, (-14L), dimensao0, localDate0);
      encomenda0.removeArtigo((String) null);
      assertEquals(2L, encomenda0.getCodigo());
      assertEquals((-14L), encomenda0.getIdComprador());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Dimensao dimensao0 = Dimensao.Grande;
      Period period0 = Period.ofMonths((-306));
      linkedHashSet0.add("fQf9=G7kTN");
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Encomenda encomenda0 = new Encomenda(linkedHashSet0, (-1667L), dimensao0, localDate0);
      encomenda0.removeArtigo("fQf9=G7kTN");
      assertEquals((-1667L), encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      encomenda0.setEncomenda(set0);
      encomenda0.numeroArtigos();
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Set<String> set0 = encomenda0.getEncomenda();
      Dimensao dimensao0 = Dimensao.Medio;
      Encomenda encomenda1 = new Encomenda(set0, 0L, dimensao0, (LocalDate) null);
      encomenda1.getIdComprador();
      assertEquals(3L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Set<String> set0 = encomenda0.getEncomenda();
      Dimensao dimensao0 = Dimensao.Grande;
      Encomenda encomenda1 = new Encomenda(set0, 816L, dimensao0, (LocalDate) null);
      long long0 = encomenda1.getIdComprador();
      assertEquals(3L, encomenda0.getCodigo());
      assertEquals(816L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(1L, encomenda0.getId());
      
      encomenda0.setId(0L);
      encomenda0.getId();
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Dimensao dimensao0 = Dimensao.Pequeno;
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda encomenda0 = new Encomenda(set0, 3114L, dimensao0, localDate0);
      encomenda0.setId((-1));
      long long0 = encomenda0.getId();
      assertEquals(2L, encomenda0.getCodigo());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEstado((Estado) null);
      encomenda0.getEstado();
      assertEquals(2L, encomenda0.getCodigo());
      assertEquals((-1L), encomenda0.getIdComprador());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomenda.setDiasDevolver(0);
      int int0 = Encomenda.getDiasDevolver();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomenda.setDiasDevolver((-4462));
      int int0 = Encomenda.getDiasDevolver();
      assertEquals((-4462), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Encomenda encomenda0 = new Encomenda(set0, (-3221L), dimensao0, localDate0);
      encomenda0.setDataEntrega(localDate0);
      encomenda0.getDataEntrega();
      assertEquals((-3221L), encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Set<String> set0 = encomenda0.getEncomenda();
      Dimensao dimensao0 = Dimensao.Pequeno;
      Encomenda encomenda1 = new Encomenda(set0, (-363L), dimensao0, (LocalDate) null);
      encomenda1.getData();
      assertEquals(3L, encomenda0.getCodigo());
      assertEquals((-1L), encomenda0.getIdComprador());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda.setCodigo(0L);
      long long0 = Encomenda.getCodigo();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomenda.setCodigo((-128L));
      long long0 = Encomenda.getCodigo();
      assertEquals((-128L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomenda.setCodigo(0L);
      long long0 = Encomenda.criaCodigo();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda.setCodigo((-934L));
      long long0 = Encomenda.criaCodigo();
      assertEquals((-934L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Dimensao dimensao0 = Dimensao.Grande;
      Month month0 = Month.JULY;
      LocalDate localDate0 = MockLocalDate.of(280, month0, 2);
      Encomenda encomenda0 = new Encomenda(linkedHashSet0, 0L, dimensao0, localDate0);
      assertEquals(1L, encomenda0.getId());
      
      encomenda0.setId(0);
      encomenda0.clone();
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda encomenda0 = new Encomenda(set0, 3114L, dimensao0, localDate0);
      encomenda0.setId((-1));
      Encomenda encomenda1 = encomenda0.clone();
      assertEquals((-1L), encomenda0.getId());
      assertEquals(2L, encomenda1.getCodigo());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda.setDiasDevolver(0);
      encomenda0.clone();
      assertEquals(0, encomenda0.getDiasDevolver());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda encomenda0 = new Encomenda(set0, 3114L, dimensao0, localDate0);
      Encomenda.setDiasDevolver((-1));
      encomenda0.clone();
      assertEquals((-1), encomenda0.getDiasDevolver());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Dimensao dimensao0 = Dimensao.Grande;
      Encomenda encomenda0 = new Encomenda(set0, 0L, dimensao0, (LocalDate) null);
      assertEquals(2L, encomenda0.getCodigo());
      
      Encomenda.setCodigo(0L);
      Encomenda encomenda1 = encomenda0.clone();
      assertEquals(1L, encomenda1.getId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Encomenda encomenda0 = new Encomenda(set0, (-3221L), dimensao0, localDate0);
      Encomenda.setCodigo((-128L));
      encomenda0.clone();
      assertEquals((-128L), encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.adicionaArtigo((String) null);
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add(" n\u00E3o existe na encomenda");
      encomenda0.setData((LocalDate) null);
      encomenda0.setEncomenda(linkedHashSet0);
      // Undeclared exception!
      try { 
        encomenda0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      // Undeclared exception!
      try { 
        encomenda0.setEncomenda((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      // Undeclared exception!
      try { 
        encomenda0.podeDevolver((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.ChronoUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Dimensao dimensao0 = Dimensao.Pequeno;
      LocalDate localDate0 = MockLocalDate.ofYearDay(2, 1);
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Set<String>) null, (-1L), dimensao0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2008L);
      Encomenda encomenda0 = new Encomenda(set0, 4981L, dimensao0, localDate0);
      encomenda0.defineTamanho();
      assertEquals(2L, encomenda0.getCodigo());
      assertEquals(4981L, encomenda0.getIdComprador());
      assertEquals(Dimensao.Grande, encomenda0.getDimensao());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add(" n\u00E3o existe na encomenda");
      linkedHashSet0.add("RHhN.7");
      encomenda0.setEncomenda(linkedHashSet0);
      encomenda0.defineTamanho();
      assertEquals(Dimensao.Medio, encomenda0.getDimensao());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Encomenda encomenda0 = new Encomenda(set0, (-3221L), dimensao0, localDate0);
      Set<String> set1 = encomenda0.removeTudo();
      encomenda0.defineTamanho();
      assertTrue(set0.equals((Object)set1));
      assertEquals((-3221L), encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Encomenda encomenda0 = new Encomenda(set0, (-3221L), dimensao0, localDate0);
      encomenda0.getEncomenda();
      assertEquals((-3221L), encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getData();
      assertEquals(2L, encomenda0.getCodigo());
      assertEquals((-1L), encomenda0.getIdComprador());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Encomenda encomenda0 = new Encomenda(set0, (-3221L), dimensao0, localDate0);
      encomenda0.getDataEntrega();
      assertEquals((-3221L), encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      Encomenda encomenda0 = new Encomenda(set0, (-3221L), dimensao0, localDate0);
      encomenda0.getEstado();
      assertEquals((-3221L), encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      long long0 = encomenda0.getId();
      assertEquals(1L, long0);
      assertEquals(2L, encomenda0.getCodigo());
      assertEquals((-1L), encomenda0.getIdComprador());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = Encomenda.criaCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Encomenda encomenda0 = new Encomenda(set0, 1969L, dimensao0, localDate0);
      encomenda0.getDimensao();
      assertEquals(1969L, encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Dimensao dimensao0 = Dimensao.Medio;
      LocalDate localDate0 = MockLocalDate.now();
      Encomenda encomenda0 = new Encomenda(set0, (-1L), dimensao0, localDate0);
      long long0 = encomenda0.getIdComprador();
      assertEquals(2L, encomenda0.getCodigo());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      encomenda0.setEncomenda(set0);
      encomenda0.toString();
      assertEquals(Dimensao.Medio, encomenda0.getDimensao());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Encomenda encomenda0 = new Encomenda(set0, 1969L, dimensao0, localDate0);
      Estado estado0 = Estado.Expedida;
      encomenda0.setDataEntrega(localDate0);
      encomenda0.setEstado(estado0);
      boolean boolean0 = encomenda0.podeDevolver(localDate0);
      assertEquals(2L, encomenda0.getCodigo());
      assertTrue(boolean0);
      assertEquals(1969L, encomenda0.getIdComprador());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Encomenda encomenda0 = new Encomenda(set0, 1969L, dimensao0, localDate0);
      LocalDate localDate1 = MockLocalDate.ofEpochDay((-2130L));
      encomenda0.setDataEntrega(localDate1);
      boolean boolean0 = encomenda0.podeDevolver(localDate0);
      assertFalse(boolean0);
      assertEquals(1969L, encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.adicionaArtigo("");
      encomenda0.removeArtigo("");
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      try { 
        encomenda0.removeArtigo(" Artigos: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo  Artigos:  n\u00E3o existe na encomenda
         //
         verifyException("projeto.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.adicionaArtigo("Encomenda:: { Artigos: java.util.HashSet@0000000002 C\u00F3digo: 1 Dimens\u00E3o: Pequeno Estado: Pendente Data de cria\u00E7\u00E3o: N/A  Data de entrega: N/A}");
      try { 
        encomenda0.adicionaArtigo("Encomenda:: { Artigos: java.util.HashSet@0000000002 C\u00F3digo: 1 Dimens\u00E3o: Pequeno Estado: Pendente Data de cria\u00E7\u00E3o: N/A  Data de entrega: N/A}");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O artigo Encomenda:: { Artigos: java.util.HashSet@0000000002 C\u00F3digo: 1 Dimens\u00E3o: Pequeno Estado: Pendente Data de cria\u00E7\u00E3o: N/A  Data de entrega: N/A} j\u00E1 existe na encomenda
         //
         verifyException("projeto.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      encomenda0.setDataEntrega(localDate0);
      encomenda0.toString();
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LocalDate localDate0 = MockLocalDate.now();
      encomenda0.setDataEntrega(localDate0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertEquals(1L, encomenda0.getId());
      assertEquals((-1L), encomenda1.getIdComprador());
      assertEquals(2L, encomenda1.getCodigo());
      assertEquals((-1L), encomenda0.getIdComprador());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.setData((LocalDate) null);
      boolean boolean0 = encomenda1.equals(encomenda0);
      assertEquals(2L, encomenda1.getCodigo());
      assertEquals((-1L), encomenda0.getIdComprador());
      assertFalse(boolean0);
      assertEquals(1L, encomenda0.getId());
      assertEquals((-1L), encomenda1.getIdComprador());
      assertEquals(1L, encomenda1.getId());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Estado estado0 = Estado.Expedida;
      encomenda0.setEstado(estado0);
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertEquals(1L, encomenda0.getId());
      assertEquals(1L, encomenda1.getId());
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(2L, encomenda1.getCodigo());
      assertFalse(boolean0);
      assertEquals((-1L), encomenda1.getIdComprador());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Dimensao dimensao0 = Dimensao.Grande;
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickMinutes(zoneId0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Encomenda encomenda0 = new Encomenda(linkedHashSet0, 2L, dimensao0, localDate0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.toString();
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertFalse(boolean0);
      assertEquals(2L, encomenda0.getIdComprador());
      assertEquals(2L, encomenda1.getIdComprador());
      assertEquals(2L, encomenda1.getCodigo());
      assertEquals(1L, encomenda1.getId());
      assertEquals(1L, encomenda0.getId());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Encomenda encomenda0 = new Encomenda(set0, 1969L, dimensao0, localDate0);
      encomenda0.removeTudo();
      Encomenda encomenda1 = new Encomenda(set0, 0L, dimensao0, localDate0);
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertEquals(3L, encomenda0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Encomenda encomenda0 = new Encomenda(set0, 1969L, dimensao0, localDate0);
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      boolean boolean0 = encomenda0.equals(thaiBuddhistDate0);
      assertFalse(boolean0);
      assertEquals(1969L, encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      boolean boolean0 = encomenda0.equals((Object) null);
      assertEquals(2L, encomenda0.getCodigo());
      assertFalse(boolean0);
      assertEquals((-1L), encomenda0.getIdComprador());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      boolean boolean0 = encomenda0.equals(encomenda0);
      assertEquals(2L, encomenda0.getCodigo());
      assertTrue(boolean0);
      assertEquals((-1L), encomenda0.getIdComprador());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Encomenda encomenda0 = new Encomenda(set0, 1969L, dimensao0, localDate0);
      Encomenda encomenda1 = new Encomenda(set0, 0L, dimensao0, localDate0);
      boolean boolean0 = encomenda0.equals(encomenda1);
      assertEquals(3L, encomenda0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = Encomenda.getDiasDevolver();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Dimensao dimensao0 = Dimensao.Grande;
      ZoneId zoneId0 = ZoneId.systemDefault();
      Clock clock0 = MockClock.tickMinutes(zoneId0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Encomenda encomenda0 = new Encomenda(linkedHashSet0, 2L, dimensao0, localDate0);
      encomenda0.numeroArtigos();
      assertEquals(2L, encomenda0.getCodigo());
      assertEquals(2L, encomenda0.getIdComprador());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Dimensao dimensao0 = Dimensao.Grande;
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Encomenda encomenda0 = new Encomenda(set0, 1969L, dimensao0, localDate0);
      assertEquals(1969L, encomenda0.getIdComprador());
      
      encomenda0.setIdComprador(0L);
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long long0 = Encomenda.getCodigo();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Dimensao dimensao0 = Dimensao.Medio;
      encomenda0.setDimensao(dimensao0);
      assertEquals((-1L), encomenda0.getIdComprador());
      assertEquals(2L, encomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      // Undeclared exception!
      try { 
        encomenda0.equals(encomenda1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Encomenda", e);
      }
  }
}
