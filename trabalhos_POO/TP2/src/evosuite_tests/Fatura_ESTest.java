/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 16:36:44 GMT 2024
 */

package projeto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import projeto.Fatura;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fatura_ESTest extends Fatura_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.setPrecoFinal(0.0);
      Fatura.setCodigo(0L);
      fatura0.setId(2L);
      fatura1.equals(fatura0);
      fatura0.setCustoProdutos(0L);
      fatura0.precoFinal = (-1.0);
      fatura0.setPrecoFinal(1.0);
      Fatura.setCodigo(0L);
      fatura0.setIdEncomenda(2L);
      fatura1.precoFinal = 0.0;
      fatura1.equals(fatura0);
      fatura1.equals(fatura0);
      Fatura fatura2 = fatura1.clone();
      fatura2.toString();
      fatura0.equals("\u20AC\n");
      Fatura fatura3 = fatura1.clone();
      fatura3.compra = false;
      fatura3.setAlteracaoPreco(1394.05);
      Set<String> set0 = fatura0.getArtigos();
      Object object0 = new Object();
      Fatura fatura4 = new Fatura(false, 0L, 3922L, set0, 1214.0462517, 1.0, 0L);
      fatura0.equals(fatura4);
      fatura3.equals(object0);
      fatura1.toString();
      fatura3.equals(fatura0);
      fatura1.clone();
      fatura2.clone();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(true, (-1L), (-3711L), set0, (-1.0), (-1.0), 0.0);
      fatura1.nifComprador = (-1L);
      fatura1.getArtigos();
      fatura1.getArtigos();
      fatura1.equals(set0);
      Fatura fatura2 = fatura0.clone();
      fatura2.clone();
      fatura1.toString();
      fatura1.equals("Fatura 2 - Compra\nNIF do comprador: -1\nArtigos vendidos: java.util.HashSet@0000000007\n\nCusto dos produtos: -1.00\u20AC\nCusto do transporte: -1.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura1.toString();
      fatura0.toString();
      Fatura fatura3 = fatura1.clone();
      fatura1.id = (-1L);
      fatura1.toString();
      Object object0 = new Object();
      fatura3.equals(object0);
      fatura3.setId(2469L);
      Object object1 = new Object();
      fatura3.equals(object1);
      fatura2.toString();
      Fatura fatura4 = fatura3.clone();
      fatura4.atualizaFatura("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000008\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: 0.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n", (-3076.5487), (-157.0), 0.0);
      Fatura.setCodigo((-1L));
      Fatura fatura5 = fatura2.clone();
      fatura5.getArtigos();
      fatura5.clone();
      fatura1.getArtigos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(true, 0L, 3277L, (Set<String>) null, 0.0, 1920.50809144971, 0.0);
      fatura0.setId(3277L);
      fatura0.getTaxaVintage();
      fatura1.setId(3277L);
      fatura0.equals(fatura1);
      // Undeclared exception!
      try { 
        fatura1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setAlteracaoPreco((-32.85170758390009));
      fatura0.getTaxaVintage();
      Fatura fatura1 = fatura0.clone();
      fatura0.setIdEncomenda(2L);
      Fatura fatura2 = fatura0.clone();
      fatura2.id = 1L;
      fatura0.toString();
      fatura2.setPrecoFinal((-32.85170758390009));
      fatura0.equals(fatura2);
      fatura0.equals(fatura2);
      Fatura fatura3 = fatura2.clone();
      fatura2.alteracaoPreco = 1.0;
      Fatura.setCodigo(1603L);
      fatura3.setPrecoFinal(0.0);
      fatura0.equals("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000006\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: -32.85\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura3.toString();
      fatura2.equals("Fatura 4 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000008\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: -32.85\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura3.equals("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000006\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: -32.85\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura1.clone();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setPrecoFinal(2L);
      fatura0.setAlteracaoPreco((-32.85170758390009));
      fatura0.getTaxaVintage();
      Fatura fatura1 = fatura0.clone();
      Fatura fatura2 = fatura0.clone();
      fatura2.id = 1L;
      fatura2.setPrecoFinal((-32.85170758390009));
      fatura0.equals(fatura2);
      fatura0.equals(fatura2);
      Fatura fatura3 = fatura2.clone();
      fatura2.alteracaoPreco = 1.0;
      Fatura.setCodigo(1603L);
      fatura3.setPrecoFinal(0.0);
      fatura3.toString();
      fatura1.getArtigos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.setPrecoFinal(0.0);
      Fatura.setCodigo(0L);
      fatura0.setId(2L);
      fatura1.equals(fatura0);
      fatura0.setCustoProdutos(0L);
      fatura0.custoProdutos = (-1.0);
      fatura0.setPrecoFinal(1.0);
      Fatura.setCodigo(0L);
      fatura1.setIdEncomenda(0L);
      fatura1.precoFinal = 0.0;
      fatura1.equals(fatura0);
      fatura1.equals(fatura0);
      Fatura fatura2 = fatura1.clone();
      fatura2.toString();
      fatura0.equals("\u20AC\n");
      Fatura fatura3 = fatura1.clone();
      fatura3.compra = false;
      fatura3.setAlteracaoPreco(1394.05);
      Set<String> set0 = fatura0.getArtigos();
      Object object0 = new Object();
      fatura1.setArtigos(set0);
      Fatura fatura4 = new Fatura(false, 0L, 3922L, set0, 1214.0462517, 1.0, 0L);
      fatura4.setNifComprador((-3322L));
      fatura0.equals(fatura4);
      fatura3.equals(object0);
      fatura1.toString();
      fatura3.equals(fatura0);
      fatura1.clone();
      fatura2.clone();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setAlteracaoPreco((-32.85170758390009));
      fatura0.getTaxaVintage();
      Fatura fatura1 = fatura0.clone();
      Fatura fatura2 = fatura0.clone();
      fatura2.id = 1L;
      fatura0.toString();
      fatura2.setPrecoFinal((-32.85170758390009));
      fatura2.setCustoProdutos(1.0);
      fatura0.equals(fatura2);
      fatura0.equals(fatura2);
      Fatura fatura3 = fatura2.clone();
      fatura2.alteracaoPreco = (double) 0L;
      Fatura.setCodigo(1603L);
      fatura3.setPrecoFinal(0.0);
      fatura0.equals("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000006\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: -32.85\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura3.toString();
      fatura2.equals("Fatura 4 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000008\n\nCusto dos produtos: 1.00\u20AC\nTaxa Vintage: -32.85\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura3.equals("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000006\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: -32.85\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura3.getArtigos();
      fatura3.equals(fatura1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.setPrecoFinal(0.0);
      Fatura.setCodigo(0L);
      fatura0.setId(2L);
      fatura1.equals(fatura0);
      fatura0.setCustoProdutos(0L);
      fatura0.custoProdutos = (double) 0L;
      fatura0.setPrecoFinal(1.0);
      Fatura.setCodigo(0L);
      fatura1.setIdEncomenda(0L);
      fatura1.precoFinal = 0.0;
      fatura1.equals(fatura0);
      fatura1.equals(fatura0);
      Fatura fatura2 = fatura1.clone();
      fatura2.toString();
      fatura0.equals("\u20AC\n");
      Fatura fatura3 = fatura1.clone();
      fatura3.compra = false;
      fatura3.setAlteracaoPreco(1394.05);
      fatura0.getArtigos();
      Object object0 = new Object();
      fatura3.equals(object0);
      fatura1.toString();
      fatura3.equals(fatura0);
      fatura1.clone();
      fatura2.clone();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setAlteracaoPreco(0.0);
      fatura0.getTaxaVintage();
      Fatura fatura1 = fatura0.clone();
      fatura0.atualizaFatura("-}<!ZWI5j\"lwW+08E[", 0.0, (-3743.171148655359), (-1094.78137));
      fatura1.id = 1L;
      fatura0.toString();
      fatura1.setPrecoFinal((-3743.171148655359));
      fatura0.equals(fatura1);
      fatura0.equals(fatura1);
      Fatura fatura2 = fatura1.clone();
      fatura2.alteracaoPreco = 1.0;
      fatura2.setPrecoFinal(0.0);
      fatura0.equals("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000004\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: -3743.17\u20AC\nPre\u00E7o final: -1094.78\u20AC\n");
      fatura2.toString();
      fatura1.equals("Fatura 3 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000006\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: 1.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura2.equals("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000004\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: -3743.17\u20AC\nPre\u00E7o final: -1094.78\u20AC\n");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.setPrecoFinal(0.0);
      Fatura.setCodigo(0L);
      fatura0.setId(2L);
      fatura1.equals(fatura0);
      fatura0.setCustoProdutos(0L);
      fatura0.custoProdutos = (-1.0);
      fatura0.setPrecoFinal(1.0);
      Fatura.setCodigo(0L);
      fatura1.setIdEncomenda(0L);
      fatura1.precoFinal = 0.0;
      fatura1.equals(fatura0);
      fatura1.equals(fatura0);
      Fatura fatura2 = fatura1.clone();
      fatura2.toString();
      fatura0.equals("\u20AC\n");
      Fatura fatura3 = fatura1.clone();
      fatura3.compra = false;
      fatura3.setAlteracaoPreco(1394.05);
      Set<String> set0 = fatura0.getArtigos();
      Object object0 = new Object();
      Fatura fatura4 = new Fatura(false, 0L, 3922L, set0, 1214.0462517, 1.0, 0L);
      fatura0.equals(fatura4);
      fatura3.equals(object0);
      fatura1.toString();
      fatura3.equals(fatura0);
      fatura1.clone();
      fatura2.clone();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setAlteracaoPreco((-32.85170758390009));
      fatura0.getTaxaVintage();
      fatura0.clone();
      Fatura fatura1 = fatura0.clone();
      fatura1.id = 1L;
      fatura0.toString();
      fatura1.setPrecoFinal((-32.85170758390009));
      fatura0.equals(fatura1);
      fatura0.equals(fatura1);
      Fatura fatura2 = fatura1.clone();
      fatura1.alteracaoPreco = 1.0;
      Fatura.setCodigo(1603L);
      fatura2.setPrecoFinal(0.0);
      fatura0.equals("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000006\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: -32.85\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura2.toString();
      fatura1.equals("Fatura 4 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000008\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: -32.85\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura2.equals("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000006\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: -32.85\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.setPrecoFinal(0.0);
      Fatura.setCodigo(0L);
      fatura0.setId(2L);
      fatura1.equals(fatura0);
      fatura0.setCustoProdutos(0L);
      fatura0.alteracaoPreco = (-1.0);
      fatura0.setPrecoFinal(1.0);
      Fatura.setCodigo(0L);
      fatura1.setIdEncomenda(0L);
      fatura1.precoFinal = (-1.0);
      fatura1.equals(fatura0);
      fatura1.equals(fatura0);
      Fatura fatura2 = fatura1.clone();
      fatura1.toString();
      fatura0.equals("\u20AC\n");
      Fatura fatura3 = fatura1.clone();
      fatura3.compra = false;
      fatura3.setAlteracaoPreco(1394.05);
      fatura0.getArtigos();
      Object object0 = new Object();
      fatura3.equals(object0);
      fatura1.toString();
      fatura3.equals(fatura0);
      fatura1.clone();
      fatura2.clone();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setId(152L);
      fatura0.setAlteracaoPreco(0.0);
      fatura0.getTaxaVintage();
      Fatura fatura1 = fatura0.clone();
      Fatura fatura2 = fatura0.clone();
      fatura0.idEncomenda = (-989L);
      fatura2.id = 152L;
      fatura0.toString();
      fatura2.setPrecoFinal(0.0);
      fatura0.equals(fatura2);
      fatura0.equals(fatura2);
      Fatura fatura3 = fatura2.clone();
      fatura3.alteracaoPreco = 1.0;
      Fatura.setCodigo(3726L);
      fatura3.setPrecoFinal(0.0);
      fatura3.setCompra(false);
      fatura0.equals((Object) null);
      fatura3.toString();
      fatura2.equals("Fatura 4 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000008\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: 1.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura3.equals("Fatura 152 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000006\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: 0.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      Object object0 = new Object();
      fatura1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.setPrecoFinal(0.0);
      Fatura.setCodigo(0L);
      fatura0.setId(2L);
      fatura1.equals(fatura0);
      fatura0.setCustoProdutos(0L);
      fatura0.custoProdutos = (-1.0);
      fatura0.setPrecoFinal(1.0);
      Fatura.setCodigo(0L);
      fatura1.setIdEncomenda(0L);
      fatura1.precoFinal = 0.0;
      fatura1.equals(fatura0);
      fatura1.equals(fatura0);
      Fatura fatura2 = fatura1.clone();
      fatura2.toString();
      fatura0.equals("\u20AC\n");
      Fatura fatura3 = fatura1.clone();
      fatura3.compra = false;
      fatura3.setAlteracaoPreco(1394.05);
      fatura0.getArtigos();
      Object object0 = new Object();
      fatura3.equals(object0);
      fatura1.toString();
      fatura3.equals(fatura0);
      fatura1.clone();
      fatura2.clone();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setId(2L);
      fatura0.setAlteracaoPreco(0.0);
      fatura0.getTaxaVintage();
      fatura0.clone();
      Fatura fatura1 = fatura0.clone();
      fatura1.id = 2L;
      fatura0.toString();
      fatura1.setPrecoFinal(0.0);
      fatura0.equals(fatura1);
      fatura0.equals(fatura1);
      Fatura fatura2 = fatura1.clone();
      fatura2.alteracaoPreco = 1.0;
      Fatura.setCodigo(3726L);
      fatura2.setPrecoFinal(0.0);
      fatura2.setCompra(false);
      fatura0.equals((Object) null);
      fatura2.toString();
      fatura1.equals("Fatura 4 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000008\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: 1.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura2.equals("Fatura 2 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000006\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: 0.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.equals("Venda\n");
      Set<String> set0 = fatura0.getArtigos();
      fatura0.setCustoProdutos((-1L));
      fatura0.setArtigos(set0);
      fatura0.idEncomenda = 0L;
      fatura0.getArtigos();
      fatura0.setIdEncomenda((-1L));
      fatura0.getCustoProdutos();
      fatura0.setNifComprador((-1L));
      fatura0.getIdEncomenda();
      fatura0.setCompra(false);
      fatura0.setCustoProdutos((-1L));
      fatura0.setCompra(true);
      Fatura.criaCodigo();
      fatura0.setCompra(true);
      fatura0.getPrecoTransporte();
      fatura0.getIdEncomenda();
      fatura0.equals(fatura0);
      fatura0.getPrecoTransporte();
      fatura0.getAlteracaoPreco();
      fatura0.setAlteracaoPreco((-1L));
      fatura0.atualizaFatura("Venda\n", 56.93292, (-1L), (-1L));
      fatura0.getIdEncomenda();
      Fatura fatura1 = new Fatura();
      fatura0.equals(fatura1);
      Fatura.setCodigo(1L);
      Fatura fatura2 = fatura0.clone();
      fatura2.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fatura fatura0 = new Fatura(false, 0L, 0L, (Set<String>) null, (-1.0), (-1.0), (-1.0));
      fatura0.precoFinal = 503.364852785;
      // Undeclared exception!
      try { 
        fatura0.getArtigos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = 1L;
      Fatura fatura0 = new Fatura(true, 1L, 0L, (Set<String>) null, 1351.74686, 1351.74686, 0L);
      // Undeclared exception!
      try { 
        fatura0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = false;
      long long0 = 0L;
      Set<String> set0 = null;
      Fatura fatura0 = new Fatura(false, 893L, 0L, (Set<String>) null, 893L, 893L, 0.0);
      // Undeclared exception!
      try { 
        fatura0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(true, (-346L), 1L, set0, 0L, 1510.84506, 0.0);
      fatura1.atualizaFatura((String) null, (-1.0), 1510.84506, 0.0);
      fatura1.setPrecoFinal((-346L));
      Fatura.criaCodigo();
      fatura0.setId((-346L));
      fatura0.getId();
      fatura0.setNifComprador(1L);
      fatura1.setCompra(true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.id = (-1994L);
      Object object0 = new Object();
      fatura0.equals(object0);
      fatura0.getIdEncomenda();
      Fatura.criaCodigo();
      fatura0.getTaxaVintage();
      fatura0.atualizaFatura("*Zd9=|zTD>8", 1.0, (-796L), 759.76698177368);
      Fatura.setCodigo((-796L));
      fatura0.getPrecoFinal();
      Fatura.criaCodigo();
      Fatura.getCodigo();
      Fatura fatura1 = fatura0.clone();
      Fatura.setCodigo((-2750L));
      fatura1.setAlteracaoPreco((-1994L));
      fatura0.setNifComprador(0L);
      Fatura fatura2 = fatura0.clone();
      fatura0.setIdEncomenda(3636L);
      fatura1.setIdEncomenda((-1994L));
      fatura0.setAlteracaoPreco((-1994L));
      Fatura.getCodigo();
      fatura2.toString();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.toString();
      fatura0.setIdEncomenda(0L);
      Fatura.setCodigo(0L);
      fatura0.setPrecoFinal((-1.0));
      fatura0.compra = false;
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setId(0L);
      Object object0 = new Object();
      Fatura.setCodigo((-1428L));
      fatura1.equals(object0);
      fatura1.setPrecoFinal(0.0);
      Fatura.criaCodigo();
      fatura1.setAlteracaoPreco(0L);
      fatura0.setId(0L);
      // Undeclared exception!
      try { 
        fatura0.getPrecoTransporte();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // N\u00E3o \u00E9 uma compra, ent\u00E3o n\u00E3o h\u00E1 custo de transporte.
         //
         verifyException("projeto.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.getTaxaVintage();
      fatura0.getNifComprador();
      fatura0.alteracaoPreco = 0.0;
      fatura0.setCompra(false);
      Fatura.criaCodigo();
      fatura0.setCompra(false);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("}Q$u>?u';::V'");
      fatura0.setArtigos(linkedHashSet0);
      fatura0.getCustoProdutos();
      Fatura.setCodigo(0L);
      fatura0.getArtigos();
      Fatura.criaCodigo();
      fatura0.equals(linkedHashSet0);
      // Undeclared exception!
      try { 
        fatura0.getPrecoTransporte();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // N\u00E3o \u00E9 uma compra, ent\u00E3o n\u00E3o h\u00E1 custo de transporte.
         //
         verifyException("projeto.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fatura fatura0 = new Fatura(true, (-5310L), (-5310L), (Set<String>) null, (-3049.0), (-1432.364660586271), 19.69376832405494);
      // Undeclared exception!
      try { 
        fatura0.atualizaFatura((String) null, (-3049.0), 19.69376832405494, (-134.4));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setCustoProdutos(0.0);
      fatura0.idEncomenda = 0L;
      fatura0.id = 0L;
      fatura0.atualizaFatura("0.00", 1150.17581661, 0L, 0.0);
      fatura0.alteracaoPreco = 0.0;
      Fatura fatura1 = fatura0.clone();
      Fatura fatura2 = fatura1.clone();
      Fatura fatura3 = fatura2.clone();
      Fatura.getCodigo();
      Set<String> set0 = fatura1.getArtigos();
      fatura2.setArtigos(set0);
      fatura2.setCompra(false);
      fatura0.getId();
      fatura3.getAlteracaoPreco();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.nifComprador = 0L;
      fatura0.setPrecoFinal((-1.0));
      fatura0.setCustoProdutos((-1.0));
      fatura0.getPrecoFinal();
      Object object0 = new Object();
      fatura0.equals(object0);
      fatura0.equals(object0);
      fatura0.setPrecoFinal(0.0);
      Object object1 = new Object();
      fatura0.equals(object1);
      Fatura.getCodigo();
      fatura0.getPrecoFinal();
      Fatura.getCodigo();
      fatura0.atualizaFatura("NMns>*+G~0", 2L, 2L, 0.0);
      fatura0.equals(object1);
      fatura0.setAlteracaoPreco((-2321.3182399));
      // Undeclared exception!
      try { 
        fatura0.setArtigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura.setCodigo(0L);
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setAlteracaoPreco(0.0);
      Fatura.setCodigo(0L);
      fatura1.setNifComprador(0L);
      fatura1.getAlteracaoPreco();
      Fatura.getCodigo();
      fatura0.setNifComprador(2580L);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, (-2393L), (-2393L), linkedHashSet0, 1.0, 1.0, (-2327.8748));
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.toString();
      fatura1.setCompra(true);
      fatura1.getNifComprador();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      fatura0.toString();
      fatura0.compra = false;
      Fatura fatura1 = new Fatura(false, 3470L, (-1649L), set0, 0L, (-1186.1291538849), (-2496.6002268534));
      Fatura fatura2 = fatura1.clone();
      fatura1.getTaxaVintage();
      fatura1.setCustoProdutos((-2496.6002268534));
      fatura1.idEncomenda = (-3041L);
      fatura0.setIdEncomenda((-3226L));
      fatura1.toString();
      fatura0.getNifComprador();
      fatura1.setPrecoFinal(0L);
      fatura1.getIdEncomenda();
      fatura0.getAlteracaoPreco();
      fatura2.setCustoProdutos(4925.901557368399);
      fatura0.getCustoProdutos();
      Fatura.getCodigo();
      fatura1.setId(0L);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fatura.setCodigo((-2437L));
      Fatura.getCodigo();
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(false, (-2324L), 0L, set0, 2084.5240876378325, 0.0, (-271.84636274));
      Fatura fatura2 = new Fatura(fatura1);
      fatura2.getCustoProdutos();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(true, 2682L, 0L, set0, 0.0, 0.0, (-2138.59664));
      Fatura fatura2 = new Fatura(fatura1);
      fatura2.getIdEncomenda();
      fatura0.setCompra(true);
      fatura1.getCustoProdutos();
      fatura1.isCompra();
      fatura2.getNifComprador();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fatura.getCodigo();
      Fatura.setCodigo(1L);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 3300L, 3570L, linkedHashSet0, 0.0, 1L, (-1913.2761783981498));
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(false, 0L, 0L, set0, 0L, 1724.47325707, 1.0);
      fatura1.getPrecoFinal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.custoProdutos = (-4961.7213);
      fatura0.atualizaFatura("", 0.0, (-4961.7213), 0.0);
      fatura0.setId(0L);
      fatura0.getCustoProdutos();
      fatura0.getIdEncomenda();
      fatura0.getIdEncomenda();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(0, 1421L);
      Fatura fatura0 = new Fatura(true, 1421L, (-1L), linkedHashSet0, 1421L, 0.0, (-75.01955));
      fatura0.getPrecoTransporte();
      fatura0.compra = true;
      fatura0.setCompra(false);
      linkedHashSet0.add("Taxa Vintage: ");
      linkedHashSet0.add("Taxa Vintage: ");
      fatura0.setCompra(false);
      fatura0.getTaxaVintage();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      fatura0.compra = false;
      Fatura fatura1 = new Fatura(true, (-246L), 1L, set0, 0.0, (-1.0), 0L);
      Fatura fatura2 = new Fatura(fatura1);
      fatura2.getArtigos();
      fatura2.getIdEncomenda();
      fatura0.isCompra();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fatura.getCodigo();
      Fatura fatura0 = new Fatura();
      fatura0.getTaxaVintage();
      fatura0.setIdEncomenda(1L);
      fatura0.id = 1L;
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = fatura0.clone();
      fatura1.precoFinal = 0.0;
      fatura1.setArtigos(set0);
      fatura1.setCompra(false);
      fatura1.equals(fatura0);
      fatura1.getId();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.getPrecoFinal();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(true, 0L, 0L, linkedHashSet0, 0L, (-2472.45117364732), (-2472.45117364732));
      fatura0.precoFinal = (double) 0L;
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.getIdEncomenda();
      fatura1.isCompra();
      fatura0.getPrecoTransporte();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.getAlteracaoPreco();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.precoFinal = (-187.024165);
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.getNifComprador();
      fatura1.setCompra(false);
      Fatura.criaCodigo();
      Set<String> set0 = fatura0.getArtigos();
      fatura1.equals(set0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(0);
      linkedHashSet0.add("]B");
      linkedHashSet0.add("");
      Fatura fatura0 = new Fatura(false, 935L, 935L, linkedHashSet0, 4366.7, 2612.3517814, 935L);
      Fatura fatura1 = new Fatura(fatura0);
      Fatura.setCodigo(1L);
      fatura1.clone();
      fatura0.equals(linkedHashSet0);
      fatura1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fatura.getCodigo();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, 1L, linkedHashSet0, 0L, 5.728, (-1006.70331));
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.getTaxaVintage();
      fatura1.setNifComprador(0L);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fatura fatura0 = null;
      try {
        fatura0 = new Fatura((Fatura) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("projeto.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setCustoProdutos(873.863491477);
      fatura0.getTaxaVintage();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.getId();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(true, (-143L), 309L, linkedHashSet0, (-143L), 309L, (-143L));
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.getNifComprador();
      linkedHashSet0.add("");
      fatura1.setId((-143L));
      fatura1.getArtigos();
      Fatura fatura2 = fatura1.clone();
      Fatura.criaCodigo();
      fatura2.setIdEncomenda(1L);
      fatura2.getPrecoFinal();
      fatura0.getArtigos();
      fatura1.setNifComprador(1L);
      Object object0 = new Object();
      fatura0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      fatura0.setArtigos(linkedHashSet0);
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.getArtigos();
      fatura0.clone();
      fatura1.setIdEncomenda(1L);
      fatura0.equals(fatura1);
      Fatura.getCodigo();
      fatura1.getCustoProdutos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setCompra(false);
      Set<String> set0 = fatura0.getArtigos();
      double double0 = (-2662.1577043944912);
      Fatura fatura1 = new Fatura(false, (-3041L), (-3041L), set0, (-2662.1577043944912), 0L, (-2662.1577043944912));
      Fatura fatura2 = new Fatura(fatura1);
      fatura1.equals(fatura2);
      Fatura.setCodigo(0L);
      fatura1.setAlteracaoPreco(0L);
      fatura0.custoProdutos = (-1391.469557519);
      fatura0.idEncomenda = (-3041L);
      fatura2.atualizaFatura("gfg6f-9Vw!4N~o`tU", (-2662.1577043944912), 0.0, (-363.59741));
      fatura2.nifComprador = 0L;
      Object object0 = new Object();
      fatura1.equals(object0);
      fatura2.setCustoProdutos((-1.0));
      fatura0.setCompra(false);
      // Undeclared exception!
      try { 
        fatura1.getPrecoTransporte();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // N\u00E3o \u00E9 uma compra, ent\u00E3o n\u00E3o h\u00E1 custo de transporte.
         //
         verifyException("projeto.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 1L, 1L, linkedHashSet0, (-4080.0), 1L, 1.0);
      fatura0.isCompra();
      fatura0.getArtigos();
      fatura0.clone();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 1L, 1L, linkedHashSet0, 1L, 1L, 1L);
      fatura0.getAlteracaoPreco();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(true, 0L, 0L, set0, 0.0, 0L, 1628.11863192);
      Fatura fatura2 = new Fatura(fatura1);
      fatura2.atualizaFatura("qNaABY", (-1029.3676), (-1217.8924086), 0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.alteracaoPreco = (-2310.263612266);
      fatura1.atualizaFatura("", 2560.8339, 0.0, 522.6413740015909);
      fatura1.getArtigos();
      fatura1.setCompra(true);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      linkedHashSet0.add("");
      linkedHashSet0.add("");
      Fatura fatura0 = new Fatura(true, (-1L), (-1L), linkedHashSet0, 0.0, (-423.0), (-1L));
      fatura0.toString();
      fatura0.setCompra(true);
      Fatura fatura1 = fatura0.clone();
      fatura1.setAlteracaoPreco((-1L));
      fatura1.getAlteracaoPreco();
      fatura0.setCustoProdutos(0.0);
      Fatura.setCodigo((-1L));
      fatura0.setPrecoFinal((-1L));
      fatura0.setPrecoFinal(1.0);
      // Undeclared exception!
      try { 
        fatura0.getTaxaVintage();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // N\u00E3o \u00E9 uma venda, ent\u00E3o n\u00E3o h\u00E1 taxa Vintage.
         //
         verifyException("projeto.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.toString();
      Fatura.criaCodigo();
      fatura0.id = 2L;
      fatura0.setIdEncomenda(2L);
      fatura0.setId(2L);
      fatura0.setAlteracaoPreco(2L);
      fatura0.toString();
      fatura0.getArtigos();
      fatura0.setIdEncomenda(2L);
      fatura0.getCustoProdutos();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(true, 0L, 0L, linkedHashSet0, 1.0, 1.0, (-2102.0786711134));
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setPrecoFinal(1.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Set<String> set0 = fatura0.getArtigos();
      Fatura fatura1 = new Fatura(false, 0L, 1394L, set0, 0L, 1190.2433979741427, 0L);
      Fatura fatura2 = new Fatura(fatura1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, 0L, (-1815L), linkedHashSet0, 0L, 0L, 0L);
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setPrecoFinal(1L);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.atualizaFatura(";G:+HU)", 36.04812575868, 36.04812575868, 36.04812575868);
      fatura0.setIdEncomenda((-1L));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setCustoProdutos(3494.30633971409);
      fatura0.idEncomenda = 864L;
      fatura0.setNifComprador(864L);
      fatura0.compra = true;
      Object object0 = new Object();
      fatura0.equals(object0);
      fatura0.idEncomenda = (-1870L);
      fatura0.equals(object0);
      fatura0.toString();
      Object object1 = new Object();
      fatura0.equals(object1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      Fatura.setCodigo(2L);
      fatura1.toString();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura.setCodigo(0L);
      Object object0 = new Object();
      fatura0.equals(object0);
      fatura0.clone();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setPrecoFinal(0.0);
      Fatura fatura1 = new Fatura();
      fatura0.equals(fatura1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setAlteracaoPreco(0.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setCustoProdutos(464.4548);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fatura fatura0 = new Fatura(false, (-140L), 1208L, (Set<String>) null, (-140L), (-140L), 1208L);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      fatura0.setArtigos(linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setNifComprador(774L);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setIdEncomenda(1865L);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura.criaCodigo();
      fatura0.setId((-1L));
      fatura0.setPrecoFinal((-124.78546607));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      Set<String> set0 = fatura1.getArtigos();
      Fatura fatura2 = new Fatura(true, 281L, (-687L), set0, 2L, 281L, 0L);
      fatura2.getPrecoTransporte();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.alteracaoPreco = 0.0;
      // Undeclared exception!
      try { 
        fatura0.getPrecoTransporte();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // N\u00E3o \u00E9 uma compra, ent\u00E3o n\u00E3o h\u00E1 custo de transporte.
         //
         verifyException("projeto.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.clone();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setAlteracaoPreco((-32.85170758390009));
      fatura0.getTaxaVintage();
      fatura0.clone();
      Fatura fatura1 = new Fatura();
      fatura1.id = 1L;
      fatura0.toString();
      fatura1.setPrecoFinal((-32.85170758390009));
      fatura0.equals(fatura1);
      fatura0.equals(fatura1);
      Fatura fatura2 = fatura1.clone();
      fatura1.alteracaoPreco = 1.0;
      Fatura.setCodigo(1603L);
      fatura2.setPrecoFinal(0.0);
      fatura0.equals("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000005\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: -32.85\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura2.toString();
      fatura1.equals("Fatura 4 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000007\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: 0.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura2.equals("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000005\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: -32.85\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setId(152L);
      fatura0.setAlteracaoPreco(0.0);
      fatura0.getTaxaVintage();
      Fatura fatura1 = fatura0.clone();
      Fatura fatura2 = fatura0.clone();
      fatura0.idEncomenda = (-989L);
      fatura2.id = 152L;
      fatura0.toString();
      fatura2.setPrecoFinal(0.0);
      fatura0.equals(fatura2);
      fatura0.equals(fatura2);
      fatura2.setPrecoFinal(0.0);
      fatura0.setCompra(false);
      fatura0.equals((Object) null);
      fatura0.toString();
      fatura2.equals("Fatura 152 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000006\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: 0.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura0.equals("Fatura 152 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000006\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: 0.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      Object object0 = new Object();
      fatura1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setAlteracaoPreco((-32.85170758390009));
      fatura0.getTaxaVintage();
      Fatura fatura1 = fatura0.clone();
      Fatura fatura2 = fatura0.clone();
      fatura2.id = 1L;
      fatura0.toString();
      fatura2.setPrecoFinal((-32.85170758390009));
      fatura0.equals(fatura2);
      fatura2.alteracaoPreco = 1.0;
      Fatura.setCodigo(1603L);
      fatura0.equals("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000006\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: -32.85\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
      fatura1.toString();
      fatura2.equals("Fatura 1 - Venda\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000006\n\nCusto dos produtos: 0.00\u20AC\nTaxa Vintage: -32.85\u20AC\nPre\u00E7o final: 0.00\u20AC\n");
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.setPrecoFinal(0.0);
      fatura0.setId(2L);
      fatura1.equals(fatura0);
      fatura0.setCustoProdutos(0L);
      fatura0.custoProdutos = (-1.0);
      fatura0.setPrecoFinal(1.0);
      Fatura.setCodigo(0L);
      fatura1.setIdEncomenda(0L);
      fatura1.precoFinal = 0.0;
      fatura1.equals(fatura0);
      fatura0.atualizaFatura("", 1.0, 0.0, 0.0);
      fatura1.equals(fatura0);
      Fatura fatura2 = fatura1.clone();
      fatura2.toString();
      fatura0.equals("\u20AC\n");
      Fatura fatura3 = fatura1.clone();
      fatura3.compra = fatura3.compra;
      fatura3.setAlteracaoPreco(1.0);
      Set<String> set0 = fatura0.getArtigos();
      Object object0 = new Object();
      fatura1.setArtigos(set0);
      Fatura fatura4 = new Fatura(false, 0L, 3922L, set0, 0L, 1.0, 0L);
      fatura4.setNifComprador((-3322L));
      fatura0.equals(fatura4);
      fatura3.equals(object0);
      fatura1.toString();
      fatura3.equals(fatura0);
      fatura1.clone();
      fatura2.clone();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setCompra(true);
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.getPrecoTransporte();
      fatura1.equals(fatura0);
      Fatura fatura2 = fatura1.clone();
      fatura2.toString();
      fatura2.atualizaFatura("Fatura 3 - Compra\nNIF do comprador: 0\nArtigos vendidos: java.util.HashSet@0000000004\n\nCusto dos produtos: 0.00\u20AC\nCusto do transporte: 0.00\u20AC\nPre\u00E7o final: 0.00\u20AC\n", (-2198.6539), 0L, 869.0);
      Object object0 = new Object();
      fatura1.equals(object0);
      Set<String> set0 = fatura1.getArtigos();
      fatura1.equals(set0);
      Set<String> set1 = fatura1.getArtigos();
      fatura0.toString();
      fatura1.toString();
      fatura0.setArtigos(set1);
      fatura2.getArtigos();
      fatura1.getArtigos();
      fatura2.getArtigos();
      Object object1 = new Object();
      boolean boolean0 = fatura0.equals(object1);
      assertEquals(4L, fatura0.getCodigo());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setPrecoFinal(0.0);
      boolean boolean0 = fatura0.equals(fatura0);
      assertEquals(0L, fatura0.idEncomenda);
      assertTrue(boolean0);
      assertEquals(0.0, fatura0.precoFinal, 0.01);
      assertEquals(0.0, fatura0.alteracaoPreco, 0.01);
      assertFalse(fatura0.compra);
      assertEquals(2L, fatura0.getCodigo());
      assertEquals(0L, fatura0.nifComprador);
      assertEquals(0.0, fatura0.custoProdutos, 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(true, 317L, 317L, linkedHashSet0, 317L, 317L, 0.0);
      fatura0.equals((Object) null);
      fatura0.setAlteracaoPreco(317L);
      fatura0.getIdEncomenda();
      // Undeclared exception!
      try { 
        fatura0.getTaxaVintage();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // N\u00E3o \u00E9 uma venda, ent\u00E3o n\u00E3o h\u00E1 taxa Vintage.
         //
         verifyException("projeto.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Fatura fatura0 = new Fatura(false, (-1755L), (-1755L), linkedHashSet0, (-1755L), (-835.2101900168524), (-1755L));
      // Undeclared exception!
      try { 
        fatura0.getPrecoTransporte();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // N\u00E3o \u00E9 uma compra, ent\u00E3o n\u00E3o h\u00E1 custo de transporte.
         //
         verifyException("projeto.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fatura.setCodigo(3651L);
      long long0 = Fatura.getCodigo();
      assertEquals(3651L, long0);
  }
}
